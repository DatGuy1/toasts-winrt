// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.5

#include "pybase.h"
#include "py.Windows.Gaming.UI.h"


namespace py::cpp::Windows::Gaming::UI
{
    struct module_state
    {
        PyObject* type_GameChatMessageOrigin;
        PyObject* type_GameChatOverlayPosition;
        PyTypeObject* type_GameBar;
        PyTypeObject* type_GameChatOverlay;
    };

    static PyObject* register_GameChatMessageOrigin(PyObject* module, PyObject* type)
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_GameChatMessageOrigin)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_GameChatMessageOrigin = type;
        Py_INCREF(state->type_GameChatMessageOrigin);


        Py_RETURN_NONE;
    }

    static PyObject* register_GameChatOverlayPosition(PyObject* module, PyObject* type)
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_GameChatOverlayPosition)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_GameChatOverlayPosition = type;
        Py_INCREF(state->type_GameChatOverlayPosition);


        Py_RETURN_NONE;
    }

    // ----- GameBar class --------------------
    constexpr const char* const type_name_GameBar = "GameBar";

    static PyObject* _new_GameBar(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameBar);
        return nullptr;
    }

    static PyObject* GameBar_get_IsInputRedirected(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Gaming::UI::GameBar::IsInputRedirected());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameBar_get_Visible(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Gaming::UI::GameBar::Visible());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameBar_add_IsInputRedirectedChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::Gaming::UI::GameBar::IsInputRedirectedChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameBar_remove_IsInputRedirectedChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Gaming::UI::GameBar::IsInputRedirectedChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameBar_add_VisibilityChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(winrt::Windows::Gaming::UI::GameBar::VisibilityChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* GameBar_remove_VisibilityChanged(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::Gaming::UI::GameBar::VisibilityChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameBar[] = {
        { "get_is_input_redirected", reinterpret_cast<PyCFunction>(GameBar_get_IsInputRedirected), METH_NOARGS | METH_STATIC, nullptr },
        { "get_visible", reinterpret_cast<PyCFunction>(GameBar_get_Visible), METH_NOARGS | METH_STATIC, nullptr },
        { "add_is_input_redirected_changed", reinterpret_cast<PyCFunction>(GameBar_add_IsInputRedirectedChanged), METH_O | METH_STATIC, nullptr },
        { "remove_is_input_redirected_changed", reinterpret_cast<PyCFunction>(GameBar_remove_IsInputRedirectedChanged), METH_O | METH_STATIC, nullptr },
        { "add_visibility_changed", reinterpret_cast<PyCFunction>(GameBar_add_VisibilityChanged), METH_O | METH_STATIC, nullptr },
        { "remove_visibility_changed", reinterpret_cast<PyCFunction>(GameBar_remove_VisibilityChanged), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameBar[] = {
        { }
    };

    static PyType_Slot _type_slots_GameBar[] = 
    {
        { Py_tp_new, _new_GameBar },
        { Py_tp_methods, _methods_GameBar },
        { Py_tp_getset, _getset_GameBar },
        { },
    };

    static PyType_Spec type_spec_GameBar =
    {
        "_winsdk_Windows_Gaming_UI.GameBar",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameBar
    };

    // ----- GameChatOverlay class --------------------
    constexpr const char* const type_name_GameChatOverlay = "GameChatOverlay";

    static PyObject* _new_GameChatOverlay(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_GameChatOverlay);
        return nullptr;
    }

    static void _dealloc_GameChatOverlay(py::wrapper::Windows::Gaming::UI::GameChatOverlay* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* GameChatOverlay_AddMessage(py::wrapper::Windows::Gaming::UI::GameChatOverlay* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Gaming::UI::GameChatMessageOrigin>(args, 2);

                self->obj.AddMessage(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameChatOverlay_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Gaming::UI::GameChatOverlay::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* GameChatOverlay_get_DesiredPosition(py::wrapper::Windows::Gaming::UI::GameChatOverlay* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DesiredPosition());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int GameChatOverlay_put_DesiredPosition(py::wrapper::Windows::Gaming::UI::GameChatOverlay* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Gaming::UI::GameChatOverlayPosition>(arg);

            self->obj.DesiredPosition(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_GameChatOverlay(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Gaming::UI::GameChatOverlay>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_GameChatOverlay[] = {
        { "add_message", reinterpret_cast<PyCFunction>(GameChatOverlay_AddMessage), METH_VARARGS, nullptr },
        { "get_default", reinterpret_cast<PyCFunction>(GameChatOverlay_GetDefault), METH_VARARGS | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_GameChatOverlay), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_GameChatOverlay[] = {
        { "desired_position", reinterpret_cast<getter>(GameChatOverlay_get_DesiredPosition), reinterpret_cast<setter>(GameChatOverlay_put_DesiredPosition), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_GameChatOverlay[] = 
    {
        { Py_tp_new, _new_GameChatOverlay },
        { Py_tp_dealloc, _dealloc_GameChatOverlay },
        { Py_tp_methods, _methods_GameChatOverlay },
        { Py_tp_getset, _getset_GameChatOverlay },
        { },
    };

    static PyType_Spec type_spec_GameChatOverlay =
    {
        "_winsdk_Windows_Gaming_UI.GameChatOverlay",
        sizeof(py::wrapper::Windows::Gaming::UI::GameChatOverlay),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_GameChatOverlay
    };

    // ----- Windows.Gaming.UI Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Gaming::UI");

    static PyMethodDef module_methods[] = {
        {"_register_GameChatMessageOrigin", register_GameChatMessageOrigin, METH_O, "registers type"},
        {"_register_GameChatOverlayPosition", register_GameChatOverlayPosition, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_GameChatMessageOrigin);
        Py_VISIT(state->type_GameChatOverlayPosition);
        Py_VISIT(state->type_GameBar);
        Py_VISIT(state->type_GameChatOverlay);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_GameChatMessageOrigin);
        Py_CLEAR(state->type_GameChatOverlayPosition);
        Py_CLEAR(state->type_GameBar);
        Py_CLEAR(state->type_GameChatOverlay);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Gaming_UI",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Gaming::UI

PyMODINIT_FUNC PyInit__winsdk_Windows_Gaming_UI(void) noexcept
{
    using namespace py::cpp::Windows::Gaming::UI;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_GameBar = py::register_python_type(module.get(), type_name_GameBar, &type_spec_GameBar, nullptr);
    if (!state->type_GameBar)
    {
        return nullptr;
    }

    Py_INCREF(state->type_GameBar);

    state->type_GameChatOverlay = py::register_python_type(module.get(), type_name_GameChatOverlay, &type_spec_GameChatOverlay, bases.get());
    if (!state->type_GameChatOverlay)
    {
        return nullptr;
    }

    Py_INCREF(state->type_GameChatOverlay);


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Gaming::UI::GameChatMessageOrigin>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameChatMessageOrigin;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::UI::GameChatMessageOrigin is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Gaming::UI::GameChatOverlayPosition>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameChatOverlayPosition;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::UI::GameChatOverlayPosition is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::UI::GameBar>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameBar;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::UI::GameBar is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Gaming::UI::GameChatOverlay>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Gaming::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Gaming::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_GameChatOverlay;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Gaming::UI::GameChatOverlay is not registered");
        return nullptr;
    }

    return python_type;
}

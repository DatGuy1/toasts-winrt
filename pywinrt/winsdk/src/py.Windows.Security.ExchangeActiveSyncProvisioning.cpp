// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.5

#include "pybase.h"
#include "py.Windows.Security.ExchangeActiveSyncProvisioning.h"


namespace py::cpp::Windows::Security::ExchangeActiveSyncProvisioning
{
    struct module_state
    {
        PyTypeObject* type_EasClientDeviceInformation;
    };

    // ----- EasClientDeviceInformation class --------------------
    constexpr const char* const type_name_EasClientDeviceInformation = "EasClientDeviceInformation";

    static PyObject* _new_EasClientDeviceInformation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_EasClientDeviceInformation(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* EasClientDeviceInformation_get_FriendlyName(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FriendlyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_Id(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Id());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_OperatingSystem(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.OperatingSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemManufacturer(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemManufacturer());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemProductName(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemProductName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemSku(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemSku());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemFirmwareVersion(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemFirmwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EasClientDeviceInformation_get_SystemHardwareVersion(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SystemHardwareVersion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_EasClientDeviceInformation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EasClientDeviceInformation[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_EasClientDeviceInformation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EasClientDeviceInformation[] = {
        { "friendly_name", reinterpret_cast<getter>(EasClientDeviceInformation_get_FriendlyName), nullptr, nullptr, nullptr },
        { "id", reinterpret_cast<getter>(EasClientDeviceInformation_get_Id), nullptr, nullptr, nullptr },
        { "operating_system", reinterpret_cast<getter>(EasClientDeviceInformation_get_OperatingSystem), nullptr, nullptr, nullptr },
        { "system_manufacturer", reinterpret_cast<getter>(EasClientDeviceInformation_get_SystemManufacturer), nullptr, nullptr, nullptr },
        { "system_product_name", reinterpret_cast<getter>(EasClientDeviceInformation_get_SystemProductName), nullptr, nullptr, nullptr },
        { "system_sku", reinterpret_cast<getter>(EasClientDeviceInformation_get_SystemSku), nullptr, nullptr, nullptr },
        { "system_firmware_version", reinterpret_cast<getter>(EasClientDeviceInformation_get_SystemFirmwareVersion), nullptr, nullptr, nullptr },
        { "system_hardware_version", reinterpret_cast<getter>(EasClientDeviceInformation_get_SystemHardwareVersion), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_EasClientDeviceInformation[] = 
    {
        { Py_tp_new, _new_EasClientDeviceInformation },
        { Py_tp_dealloc, _dealloc_EasClientDeviceInformation },
        { Py_tp_methods, _methods_EasClientDeviceInformation },
        { Py_tp_getset, _getset_EasClientDeviceInformation },
        { },
    };

    static PyType_Spec type_spec_EasClientDeviceInformation =
    {
        "_winsdk_Windows_Security_ExchangeActiveSyncProvisioning.EasClientDeviceInformation",
        sizeof(py::wrapper::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EasClientDeviceInformation
    };

    // ----- Windows.Security.ExchangeActiveSyncProvisioning Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Security::ExchangeActiveSyncProvisioning");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_EasClientDeviceInformation);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_EasClientDeviceInformation);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Security_ExchangeActiveSyncProvisioning",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Security::ExchangeActiveSyncProvisioning

PyMODINIT_FUNC PyInit__winsdk_Windows_Security_ExchangeActiveSyncProvisioning(void) noexcept
{
    using namespace py::cpp::Windows::Security::ExchangeActiveSyncProvisioning;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_EasClientDeviceInformation = py::register_python_type(module.get(), type_name_EasClientDeviceInformation, &type_spec_EasClientDeviceInformation, bases.get());
    if (!state->type_EasClientDeviceInformation)
    {
        return nullptr;
    }

    Py_INCREF(state->type_EasClientDeviceInformation);


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Security::ExchangeActiveSyncProvisioning;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Security::ExchangeActiveSyncProvisioning");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_EasClientDeviceInformation;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation is not registered");
        return nullptr;
    }

    return python_type;
}

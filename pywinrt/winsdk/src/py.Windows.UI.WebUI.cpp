// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.3

#include "pybase.h"
#include "py.Windows.UI.WebUI.h"

PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::ActivatedDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::ActivatedOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::BackgroundActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::EnteredBackgroundEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::HtmlPrintDocumentSource>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::LeavingBackgroundEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::SuspendingDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::SuspendingEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::SuspendingOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIApplication>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIBackgroundTaskInstance>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUILaunchActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUINavigatedDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUINavigatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUINavigatedOperation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIView>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::IActivatedEventArgsDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::IWebUIBackgroundTaskInstance>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::UI::WebUI::IWebUINavigatedEventArgs>::python_type;

namespace py::cpp::Windows::UI::WebUI
{
    // ----- ActivatedDeferral class --------------------
    constexpr const char* const _type_name_ActivatedDeferral = "ActivatedDeferral";

    static PyObject* _new_ActivatedDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ActivatedDeferral);
        return nullptr;
    }

    static void _dealloc_ActivatedDeferral(py::wrapper::Windows::UI::WebUI::ActivatedDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ActivatedDeferral_Complete(py::wrapper::Windows::UI::WebUI::ActivatedDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ActivatedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::ActivatedDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ActivatedDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(ActivatedDeferral_Complete), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ActivatedDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ActivatedDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_ActivatedDeferral[] = 
    {
        { Py_tp_new, _new_ActivatedDeferral },
        { Py_tp_dealloc, _dealloc_ActivatedDeferral },
        { Py_tp_methods, _methods_ActivatedDeferral },
        { Py_tp_getset, _getset_ActivatedDeferral },
        { },
    };

    static PyType_Spec _type_spec_ActivatedDeferral =
    {
        "_winsdk_Windows_UI_WebUI.ActivatedDeferral",
        sizeof(py::wrapper::Windows::UI::WebUI::ActivatedDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ActivatedDeferral
    };

    // ----- ActivatedOperation class --------------------
    constexpr const char* const _type_name_ActivatedOperation = "ActivatedOperation";

    static PyObject* _new_ActivatedOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ActivatedOperation);
        return nullptr;
    }

    static void _dealloc_ActivatedOperation(py::wrapper::Windows::UI::WebUI::ActivatedOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ActivatedOperation_GetDeferral(py::wrapper::Windows::UI::WebUI::ActivatedOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ActivatedOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::ActivatedOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ActivatedOperation[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(ActivatedOperation_GetDeferral), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ActivatedOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ActivatedOperation[] = {
        { }
    };

    static PyType_Slot _type_slots_ActivatedOperation[] = 
    {
        { Py_tp_new, _new_ActivatedOperation },
        { Py_tp_dealloc, _dealloc_ActivatedOperation },
        { Py_tp_methods, _methods_ActivatedOperation },
        { Py_tp_getset, _getset_ActivatedOperation },
        { },
    };

    static PyType_Spec _type_spec_ActivatedOperation =
    {
        "_winsdk_Windows_UI_WebUI.ActivatedOperation",
        sizeof(py::wrapper::Windows::UI::WebUI::ActivatedOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ActivatedOperation
    };

    // ----- BackgroundActivatedEventArgs class --------------------
    constexpr const char* const _type_name_BackgroundActivatedEventArgs = "BackgroundActivatedEventArgs";

    static PyObject* _new_BackgroundActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_BackgroundActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_BackgroundActivatedEventArgs(py::wrapper::Windows::UI::WebUI::BackgroundActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* BackgroundActivatedEventArgs_get_TaskInstance(py::wrapper::Windows::UI::WebUI::BackgroundActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TaskInstance());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_BackgroundActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::BackgroundActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_BackgroundActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_BackgroundActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_BackgroundActivatedEventArgs[] = {
        { "task_instance", reinterpret_cast<getter>(BackgroundActivatedEventArgs_get_TaskInstance), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_BackgroundActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_BackgroundActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_BackgroundActivatedEventArgs },
        { Py_tp_methods, _methods_BackgroundActivatedEventArgs },
        { Py_tp_getset, _getset_BackgroundActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_BackgroundActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.BackgroundActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::BackgroundActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_BackgroundActivatedEventArgs
    };

    // ----- EnteredBackgroundEventArgs class --------------------
    constexpr const char* const _type_name_EnteredBackgroundEventArgs = "EnteredBackgroundEventArgs";

    static PyObject* _new_EnteredBackgroundEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_EnteredBackgroundEventArgs);
        return nullptr;
    }

    static void _dealloc_EnteredBackgroundEventArgs(py::wrapper::Windows::UI::WebUI::EnteredBackgroundEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* EnteredBackgroundEventArgs_GetDeferral(py::wrapper::Windows::UI::WebUI::EnteredBackgroundEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_EnteredBackgroundEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::EnteredBackgroundEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnteredBackgroundEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(EnteredBackgroundEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_EnteredBackgroundEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnteredBackgroundEventArgs[] = {
        { }
    };

    static PyType_Slot _type_slots_EnteredBackgroundEventArgs[] = 
    {
        { Py_tp_new, _new_EnteredBackgroundEventArgs },
        { Py_tp_dealloc, _dealloc_EnteredBackgroundEventArgs },
        { Py_tp_methods, _methods_EnteredBackgroundEventArgs },
        { Py_tp_getset, _getset_EnteredBackgroundEventArgs },
        { },
    };

    static PyType_Spec _type_spec_EnteredBackgroundEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.EnteredBackgroundEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::EnteredBackgroundEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnteredBackgroundEventArgs
    };

    // ----- HtmlPrintDocumentSource class --------------------
    constexpr const char* const _type_name_HtmlPrintDocumentSource = "HtmlPrintDocumentSource";

    static PyObject* _new_HtmlPrintDocumentSource(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_HtmlPrintDocumentSource);
        return nullptr;
    }

    static void _dealloc_HtmlPrintDocumentSource(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* HtmlPrintDocumentSource_Close(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Close();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HtmlPrintDocumentSource_TrySetPageRange(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TrySetPageRange(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_TopMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TopMargin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_TopMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.TopMargin(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_ShrinkToFit(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShrinkToFit());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_ShrinkToFit(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.ShrinkToFit(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_RightMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RightMargin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_RightMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.RightMargin(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_PercentScale(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PercentScale());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_PercentScale(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.PercentScale(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_LeftMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LeftMargin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_LeftMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.LeftMargin(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_EnableHeaderFooter(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EnableHeaderFooter());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_EnableHeaderFooter(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.EnableHeaderFooter(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_Content(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Content());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_Content(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::PrintContent>(arg);

            self->obj.Content(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_BottomMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BottomMargin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int HtmlPrintDocumentSource_put_BottomMargin(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<float>(arg);

            self->obj.BottomMargin(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* HtmlPrintDocumentSource_get_PageRange(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PageRange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_HtmlPrintDocumentSource(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::HtmlPrintDocumentSource>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _enter_HtmlPrintDocumentSource(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self) noexcept
    {
        Py_INCREF(self);
        return reinterpret_cast<PyObject*>(self);
    }

    static PyObject* _exit_HtmlPrintDocumentSource(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource* self) noexcept
    {
        try
        {
            self->obj.Close();
            Py_RETURN_FALSE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HtmlPrintDocumentSource[] = {
        { "close", reinterpret_cast<PyCFunction>(HtmlPrintDocumentSource_Close), METH_VARARGS, nullptr },
        { "try_set_page_range", reinterpret_cast<PyCFunction>(HtmlPrintDocumentSource_TrySetPageRange), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HtmlPrintDocumentSource), METH_O | METH_STATIC, nullptr },
        { "__enter__", reinterpret_cast<PyCFunction>(_enter_HtmlPrintDocumentSource), METH_NOARGS, nullptr },
        { "__exit__",  reinterpret_cast<PyCFunction>(_exit_HtmlPrintDocumentSource), METH_VARARGS, nullptr },
        { }
    };

    static PyGetSetDef _getset_HtmlPrintDocumentSource[] = {
        { "top_margin", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_TopMargin), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_TopMargin), nullptr, nullptr },
        { "shrink_to_fit", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_ShrinkToFit), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_ShrinkToFit), nullptr, nullptr },
        { "right_margin", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_RightMargin), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_RightMargin), nullptr, nullptr },
        { "percent_scale", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_PercentScale), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_PercentScale), nullptr, nullptr },
        { "left_margin", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_LeftMargin), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_LeftMargin), nullptr, nullptr },
        { "enable_header_footer", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_EnableHeaderFooter), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_EnableHeaderFooter), nullptr, nullptr },
        { "content", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_Content), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_Content), nullptr, nullptr },
        { "bottom_margin", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_BottomMargin), reinterpret_cast<setter>(HtmlPrintDocumentSource_put_BottomMargin), nullptr, nullptr },
        { "page_range", reinterpret_cast<getter>(HtmlPrintDocumentSource_get_PageRange), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_HtmlPrintDocumentSource[] = 
    {
        { Py_tp_new, _new_HtmlPrintDocumentSource },
        { Py_tp_dealloc, _dealloc_HtmlPrintDocumentSource },
        { Py_tp_methods, _methods_HtmlPrintDocumentSource },
        { Py_tp_getset, _getset_HtmlPrintDocumentSource },
        { },
    };

    static PyType_Spec _type_spec_HtmlPrintDocumentSource =
    {
        "_winsdk_Windows_UI_WebUI.HtmlPrintDocumentSource",
        sizeof(py::wrapper::Windows::UI::WebUI::HtmlPrintDocumentSource),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HtmlPrintDocumentSource
    };

    // ----- LeavingBackgroundEventArgs class --------------------
    constexpr const char* const _type_name_LeavingBackgroundEventArgs = "LeavingBackgroundEventArgs";

    static PyObject* _new_LeavingBackgroundEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LeavingBackgroundEventArgs);
        return nullptr;
    }

    static void _dealloc_LeavingBackgroundEventArgs(py::wrapper::Windows::UI::WebUI::LeavingBackgroundEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LeavingBackgroundEventArgs_GetDeferral(py::wrapper::Windows::UI::WebUI::LeavingBackgroundEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_LeavingBackgroundEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::LeavingBackgroundEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LeavingBackgroundEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(LeavingBackgroundEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LeavingBackgroundEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LeavingBackgroundEventArgs[] = {
        { }
    };

    static PyType_Slot _type_slots_LeavingBackgroundEventArgs[] = 
    {
        { Py_tp_new, _new_LeavingBackgroundEventArgs },
        { Py_tp_dealloc, _dealloc_LeavingBackgroundEventArgs },
        { Py_tp_methods, _methods_LeavingBackgroundEventArgs },
        { Py_tp_getset, _getset_LeavingBackgroundEventArgs },
        { },
    };

    static PyType_Spec _type_spec_LeavingBackgroundEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.LeavingBackgroundEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::LeavingBackgroundEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LeavingBackgroundEventArgs
    };

    // ----- NewWebUIViewCreatedEventArgs class --------------------
    constexpr const char* const _type_name_NewWebUIViewCreatedEventArgs = "NewWebUIViewCreatedEventArgs";

    static PyObject* _new_NewWebUIViewCreatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_NewWebUIViewCreatedEventArgs);
        return nullptr;
    }

    static void _dealloc_NewWebUIViewCreatedEventArgs(py::wrapper::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* NewWebUIViewCreatedEventArgs_GetDeferral(py::wrapper::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* NewWebUIViewCreatedEventArgs_get_ActivatedEventArgs(py::wrapper::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedEventArgs());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NewWebUIViewCreatedEventArgs_get_HasPendingNavigate(py::wrapper::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasPendingNavigate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NewWebUIViewCreatedEventArgs_get_WebUIView(py::wrapper::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebUIView());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_NewWebUIViewCreatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NewWebUIViewCreatedEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(NewWebUIViewCreatedEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_NewWebUIViewCreatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_NewWebUIViewCreatedEventArgs[] = {
        { "activated_event_args", reinterpret_cast<getter>(NewWebUIViewCreatedEventArgs_get_ActivatedEventArgs), nullptr, nullptr, nullptr },
        { "has_pending_navigate", reinterpret_cast<getter>(NewWebUIViewCreatedEventArgs_get_HasPendingNavigate), nullptr, nullptr, nullptr },
        { "web_u_i_view", reinterpret_cast<getter>(NewWebUIViewCreatedEventArgs_get_WebUIView), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_NewWebUIViewCreatedEventArgs[] = 
    {
        { Py_tp_new, _new_NewWebUIViewCreatedEventArgs },
        { Py_tp_dealloc, _dealloc_NewWebUIViewCreatedEventArgs },
        { Py_tp_methods, _methods_NewWebUIViewCreatedEventArgs },
        { Py_tp_getset, _getset_NewWebUIViewCreatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_NewWebUIViewCreatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.NewWebUIViewCreatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NewWebUIViewCreatedEventArgs
    };

    // ----- SuspendingDeferral class --------------------
    constexpr const char* const _type_name_SuspendingDeferral = "SuspendingDeferral";

    static PyObject* _new_SuspendingDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SuspendingDeferral);
        return nullptr;
    }

    static void _dealloc_SuspendingDeferral(py::wrapper::Windows::UI::WebUI::SuspendingDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SuspendingDeferral_Complete(py::wrapper::Windows::UI::WebUI::SuspendingDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_SuspendingDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::SuspendingDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SuspendingDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(SuspendingDeferral_Complete), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SuspendingDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SuspendingDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_SuspendingDeferral[] = 
    {
        { Py_tp_new, _new_SuspendingDeferral },
        { Py_tp_dealloc, _dealloc_SuspendingDeferral },
        { Py_tp_methods, _methods_SuspendingDeferral },
        { Py_tp_getset, _getset_SuspendingDeferral },
        { },
    };

    static PyType_Spec _type_spec_SuspendingDeferral =
    {
        "_winsdk_Windows_UI_WebUI.SuspendingDeferral",
        sizeof(py::wrapper::Windows::UI::WebUI::SuspendingDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SuspendingDeferral
    };

    // ----- SuspendingEventArgs class --------------------
    constexpr const char* const _type_name_SuspendingEventArgs = "SuspendingEventArgs";

    static PyObject* _new_SuspendingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SuspendingEventArgs);
        return nullptr;
    }

    static void _dealloc_SuspendingEventArgs(py::wrapper::Windows::UI::WebUI::SuspendingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SuspendingEventArgs_get_SuspendingOperation(py::wrapper::Windows::UI::WebUI::SuspendingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuspendingOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SuspendingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::SuspendingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SuspendingEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_SuspendingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SuspendingEventArgs[] = {
        { "suspending_operation", reinterpret_cast<getter>(SuspendingEventArgs_get_SuspendingOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SuspendingEventArgs[] = 
    {
        { Py_tp_new, _new_SuspendingEventArgs },
        { Py_tp_dealloc, _dealloc_SuspendingEventArgs },
        { Py_tp_methods, _methods_SuspendingEventArgs },
        { Py_tp_getset, _getset_SuspendingEventArgs },
        { },
    };

    static PyType_Spec _type_spec_SuspendingEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.SuspendingEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::SuspendingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SuspendingEventArgs
    };

    // ----- SuspendingOperation class --------------------
    constexpr const char* const _type_name_SuspendingOperation = "SuspendingOperation";

    static PyObject* _new_SuspendingOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_SuspendingOperation);
        return nullptr;
    }

    static void _dealloc_SuspendingOperation(py::wrapper::Windows::UI::WebUI::SuspendingOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* SuspendingOperation_GetDeferral(py::wrapper::Windows::UI::WebUI::SuspendingOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SuspendingOperation_get_Deadline(py::wrapper::Windows::UI::WebUI::SuspendingOperation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_SuspendingOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::SuspendingOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SuspendingOperation[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(SuspendingOperation_GetDeferral), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SuspendingOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SuspendingOperation[] = {
        { "deadline", reinterpret_cast<getter>(SuspendingOperation_get_Deadline), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SuspendingOperation[] = 
    {
        { Py_tp_new, _new_SuspendingOperation },
        { Py_tp_dealloc, _dealloc_SuspendingOperation },
        { Py_tp_methods, _methods_SuspendingOperation },
        { Py_tp_getset, _getset_SuspendingOperation },
        { },
    };

    static PyType_Spec _type_spec_SuspendingOperation =
    {
        "_winsdk_Windows_UI_WebUI.SuspendingOperation",
        sizeof(py::wrapper::Windows::UI::WebUI::SuspendingOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SuspendingOperation
    };

    // ----- WebUIApplication class --------------------
    constexpr const char* const _type_name_WebUIApplication = "WebUIApplication";

    static PyObject* _new_WebUIApplication(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIApplication);
        return nullptr;
    }

    static PyObject* WebUIApplication_EnablePrelaunch(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                winrt::Windows::UI::WebUI::WebUIApplication::EnablePrelaunch(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_RequestRestartAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::RequestRestartAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_RequestRestartForUserAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::System::User>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::RequestRestartForUserAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_BackgroundActivated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::BackgroundActivatedEventHandler>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::BackgroundActivated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_BackgroundActivated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::BackgroundActivated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_NewWebUIViewCreated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::EventHandler<winrt::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs>>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::NewWebUIViewCreated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_NewWebUIViewCreated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::NewWebUIViewCreated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_EnteredBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::EnteredBackgroundEventHandler>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::EnteredBackground(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_EnteredBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::EnteredBackground(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_LeavingBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::LeavingBackgroundEventHandler>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::LeavingBackground(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_LeavingBackground(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::LeavingBackground(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_Activated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::ActivatedEventHandler>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::Activated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_Activated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::Activated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_Navigated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::NavigatedEventHandler>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::Navigated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_Navigated(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::Navigated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_Resuming(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::ResumingEventHandler>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::Resuming(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_Resuming(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::Resuming(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_add_Suspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::WebUI::SuspendingEventHandler>(arg);

            return py::convert(winrt::Windows::UI::WebUI::WebUIApplication::Suspending(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIApplication_remove_Suspending(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            winrt::Windows::UI::WebUI::WebUIApplication::Suspending(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIApplication[] = {
        { "enable_prelaunch", reinterpret_cast<PyCFunction>(WebUIApplication_EnablePrelaunch), METH_VARARGS | METH_STATIC, nullptr },
        { "request_restart_async", reinterpret_cast<PyCFunction>(WebUIApplication_RequestRestartAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_restart_for_user_async", reinterpret_cast<PyCFunction>(WebUIApplication_RequestRestartForUserAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "add_background_activated", reinterpret_cast<PyCFunction>(WebUIApplication_add_BackgroundActivated), METH_O | METH_STATIC, nullptr },
        { "remove_background_activated", reinterpret_cast<PyCFunction>(WebUIApplication_remove_BackgroundActivated), METH_O | METH_STATIC, nullptr },
        { "add_new_web_u_i_view_created", reinterpret_cast<PyCFunction>(WebUIApplication_add_NewWebUIViewCreated), METH_O | METH_STATIC, nullptr },
        { "remove_new_web_u_i_view_created", reinterpret_cast<PyCFunction>(WebUIApplication_remove_NewWebUIViewCreated), METH_O | METH_STATIC, nullptr },
        { "add_entered_background", reinterpret_cast<PyCFunction>(WebUIApplication_add_EnteredBackground), METH_O | METH_STATIC, nullptr },
        { "remove_entered_background", reinterpret_cast<PyCFunction>(WebUIApplication_remove_EnteredBackground), METH_O | METH_STATIC, nullptr },
        { "add_leaving_background", reinterpret_cast<PyCFunction>(WebUIApplication_add_LeavingBackground), METH_O | METH_STATIC, nullptr },
        { "remove_leaving_background", reinterpret_cast<PyCFunction>(WebUIApplication_remove_LeavingBackground), METH_O | METH_STATIC, nullptr },
        { "add_activated", reinterpret_cast<PyCFunction>(WebUIApplication_add_Activated), METH_O | METH_STATIC, nullptr },
        { "remove_activated", reinterpret_cast<PyCFunction>(WebUIApplication_remove_Activated), METH_O | METH_STATIC, nullptr },
        { "add_navigated", reinterpret_cast<PyCFunction>(WebUIApplication_add_Navigated), METH_O | METH_STATIC, nullptr },
        { "remove_navigated", reinterpret_cast<PyCFunction>(WebUIApplication_remove_Navigated), METH_O | METH_STATIC, nullptr },
        { "add_resuming", reinterpret_cast<PyCFunction>(WebUIApplication_add_Resuming), METH_O | METH_STATIC, nullptr },
        { "remove_resuming", reinterpret_cast<PyCFunction>(WebUIApplication_remove_Resuming), METH_O | METH_STATIC, nullptr },
        { "add_suspending", reinterpret_cast<PyCFunction>(WebUIApplication_add_Suspending), METH_O | METH_STATIC, nullptr },
        { "remove_suspending", reinterpret_cast<PyCFunction>(WebUIApplication_remove_Suspending), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIApplication[] = {
        { }
    };

    static PyType_Slot _type_slots_WebUIApplication[] = 
    {
        { Py_tp_new, _new_WebUIApplication },
        { Py_tp_methods, _methods_WebUIApplication },
        { Py_tp_getset, _getset_WebUIApplication },
        { },
    };

    static PyType_Spec _type_spec_WebUIApplication =
    {
        "_winsdk_Windows_UI_WebUI.WebUIApplication",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIApplication
    };

    // ----- WebUIAppointmentsProviderAddAppointmentActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs = "WebUIAppointmentsProviderAddAppointmentActivatedEventArgs";

    static PyObject* _new_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_Verb(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_AddAppointmentOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AddAppointmentOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "verb", reinterpret_cast<getter>(WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_Verb), nullptr, nullptr, nullptr },
        { "add_appointment_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_AddAppointmentOperation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderAddAppointmentActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIAppointmentsProviderAddAppointmentActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs
    };

    // ----- WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs = "WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs";

    static PyObject* _new_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_Verb(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_RemoveAppointmentOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RemoveAppointmentOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "verb", reinterpret_cast<getter>(WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_Verb), nullptr, nullptr, nullptr },
        { "remove_appointment_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_RemoveAppointmentOperation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs
    };

    // ----- WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs = "WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs";

    static PyObject* _new_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_Verb(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_ReplaceAppointmentOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ReplaceAppointmentOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "verb", reinterpret_cast<getter>(WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_Verb), nullptr, nullptr, nullptr },
        { "replace_appointment_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_ReplaceAppointmentOperation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs
    };

    // ----- WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs = "WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs";

    static PyObject* _new_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_Verb(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_InstanceStartDate(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstanceStartDate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_LocalId(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LocalId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_RoamingId(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RoamingId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "verb", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_Verb), nullptr, nullptr, nullptr },
        { "instance_start_date", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_InstanceStartDate), nullptr, nullptr, nullptr },
        { "local_id", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_LocalId), nullptr, nullptr, nullptr },
        { "roaming_id", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_RoamingId), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
    };

    // ----- WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs = "WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs";

    static PyObject* _new_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_Verb(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_Duration(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Duration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_TimeToShow(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TimeToShow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "verb", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_Verb), nullptr, nullptr, nullptr },
        { "duration", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_Duration), nullptr, nullptr, nullptr },
        { "time_to_show", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_TimeToShow), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs
    };

    // ----- WebUIBackgroundTaskInstance class --------------------
    constexpr const char* const _type_name_WebUIBackgroundTaskInstance = "WebUIBackgroundTaskInstance";

    static PyObject* _new_WebUIBackgroundTaskInstance(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIBackgroundTaskInstance);
        return nullptr;
    }

    static PyObject* WebUIBackgroundTaskInstance_get_Current(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::UI::WebUI::WebUIBackgroundTaskInstance::Current());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIBackgroundTaskInstance[] = {
        { "get_current", reinterpret_cast<PyCFunction>(WebUIBackgroundTaskInstance_get_Current), METH_NOARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIBackgroundTaskInstance[] = {
        { }
    };

    static PyType_Slot _type_slots_WebUIBackgroundTaskInstance[] = 
    {
        { Py_tp_new, _new_WebUIBackgroundTaskInstance },
        { Py_tp_methods, _methods_WebUIBackgroundTaskInstance },
        { Py_tp_getset, _getset_WebUIBackgroundTaskInstance },
        { },
    };

    static PyType_Spec _type_spec_WebUIBackgroundTaskInstance =
    {
        "_winsdk_Windows_UI_WebUI.WebUIBackgroundTaskInstance",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIBackgroundTaskInstance
    };

    // ----- WebUIBackgroundTaskInstanceRuntimeClass class --------------------
    constexpr const char* const _type_name_WebUIBackgroundTaskInstanceRuntimeClass = "WebUIBackgroundTaskInstanceRuntimeClass";

    static PyObject* _new_WebUIBackgroundTaskInstanceRuntimeClass(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIBackgroundTaskInstanceRuntimeClass);
        return nullptr;
    }

    static void _dealloc_WebUIBackgroundTaskInstanceRuntimeClass(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_GetDeferral(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_get_Progress(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Progress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebUIBackgroundTaskInstanceRuntimeClass_put_Progress(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.Progress(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_get_InstanceId(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstanceId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_get_SuspendedCount(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SuspendedCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_get_Task(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Task());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_get_TriggerDetails(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TriggerDetails());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_get_Succeeded(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Succeeded());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebUIBackgroundTaskInstanceRuntimeClass_put_Succeeded(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Succeeded(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_add_Canceled(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::ApplicationModel::Background::BackgroundTaskCanceledEventHandler>(arg);

            return py::convert(self->obj.Canceled(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBackgroundTaskInstanceRuntimeClass_remove_Canceled(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Canceled(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIBackgroundTaskInstanceRuntimeClass(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIBackgroundTaskInstanceRuntimeClass[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(WebUIBackgroundTaskInstanceRuntimeClass_GetDeferral), METH_VARARGS, nullptr },
        { "add_canceled", reinterpret_cast<PyCFunction>(WebUIBackgroundTaskInstanceRuntimeClass_add_Canceled), METH_O, nullptr },
        { "remove_canceled", reinterpret_cast<PyCFunction>(WebUIBackgroundTaskInstanceRuntimeClass_remove_Canceled), METH_O, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIBackgroundTaskInstanceRuntimeClass), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIBackgroundTaskInstanceRuntimeClass[] = {
        { "progress", reinterpret_cast<getter>(WebUIBackgroundTaskInstanceRuntimeClass_get_Progress), reinterpret_cast<setter>(WebUIBackgroundTaskInstanceRuntimeClass_put_Progress), nullptr, nullptr },
        { "instance_id", reinterpret_cast<getter>(WebUIBackgroundTaskInstanceRuntimeClass_get_InstanceId), nullptr, nullptr, nullptr },
        { "suspended_count", reinterpret_cast<getter>(WebUIBackgroundTaskInstanceRuntimeClass_get_SuspendedCount), nullptr, nullptr, nullptr },
        { "task", reinterpret_cast<getter>(WebUIBackgroundTaskInstanceRuntimeClass_get_Task), nullptr, nullptr, nullptr },
        { "trigger_details", reinterpret_cast<getter>(WebUIBackgroundTaskInstanceRuntimeClass_get_TriggerDetails), nullptr, nullptr, nullptr },
        { "succeeded", reinterpret_cast<getter>(WebUIBackgroundTaskInstanceRuntimeClass_get_Succeeded), reinterpret_cast<setter>(WebUIBackgroundTaskInstanceRuntimeClass_put_Succeeded), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIBackgroundTaskInstanceRuntimeClass[] = 
    {
        { Py_tp_new, _new_WebUIBackgroundTaskInstanceRuntimeClass },
        { Py_tp_dealloc, _dealloc_WebUIBackgroundTaskInstanceRuntimeClass },
        { Py_tp_methods, _methods_WebUIBackgroundTaskInstanceRuntimeClass },
        { Py_tp_getset, _getset_WebUIBackgroundTaskInstanceRuntimeClass },
        { },
    };

    static PyType_Spec _type_spec_WebUIBackgroundTaskInstanceRuntimeClass =
    {
        "_winsdk_Windows_UI_WebUI.WebUIBackgroundTaskInstanceRuntimeClass",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIBackgroundTaskInstanceRuntimeClass
    };

    // ----- WebUIBarcodeScannerPreviewActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIBarcodeScannerPreviewActivatedEventArgs = "WebUIBarcodeScannerPreviewActivatedEventArgs";

    static PyObject* _new_WebUIBarcodeScannerPreviewActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIBarcodeScannerPreviewActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIBarcodeScannerPreviewActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIBarcodeScannerPreviewActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBarcodeScannerPreviewActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBarcodeScannerPreviewActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBarcodeScannerPreviewActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBarcodeScannerPreviewActivatedEventArgs_get_ConnectionId(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ConnectionId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIBarcodeScannerPreviewActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIBarcodeScannerPreviewActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIBarcodeScannerPreviewActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIBarcodeScannerPreviewActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIBarcodeScannerPreviewActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIBarcodeScannerPreviewActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIBarcodeScannerPreviewActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIBarcodeScannerPreviewActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIBarcodeScannerPreviewActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "connection_id", reinterpret_cast<getter>(WebUIBarcodeScannerPreviewActivatedEventArgs_get_ConnectionId), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIBarcodeScannerPreviewActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIBarcodeScannerPreviewActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIBarcodeScannerPreviewActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIBarcodeScannerPreviewActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIBarcodeScannerPreviewActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIBarcodeScannerPreviewActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIBarcodeScannerPreviewActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIBarcodeScannerPreviewActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIBarcodeScannerPreviewActivatedEventArgs
    };

    // ----- WebUICachedFileUpdaterActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUICachedFileUpdaterActivatedEventArgs = "WebUICachedFileUpdaterActivatedEventArgs";

    static PyObject* _new_WebUICachedFileUpdaterActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUICachedFileUpdaterActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUICachedFileUpdaterActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUICachedFileUpdaterActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICachedFileUpdaterActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICachedFileUpdaterActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICachedFileUpdaterActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICachedFileUpdaterActivatedEventArgs_get_CachedFileUpdaterUI(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CachedFileUpdaterUI());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICachedFileUpdaterActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUICachedFileUpdaterActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUICachedFileUpdaterActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUICachedFileUpdaterActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUICachedFileUpdaterActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUICachedFileUpdaterActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUICachedFileUpdaterActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUICachedFileUpdaterActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUICachedFileUpdaterActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "cached_file_updater_u_i", reinterpret_cast<getter>(WebUICachedFileUpdaterActivatedEventArgs_get_CachedFileUpdaterUI), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUICachedFileUpdaterActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUICachedFileUpdaterActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUICachedFileUpdaterActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUICachedFileUpdaterActivatedEventArgs },
        { Py_tp_methods, _methods_WebUICachedFileUpdaterActivatedEventArgs },
        { Py_tp_getset, _getset_WebUICachedFileUpdaterActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUICachedFileUpdaterActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUICachedFileUpdaterActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUICachedFileUpdaterActivatedEventArgs
    };

    // ----- WebUICommandLineActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUICommandLineActivatedEventArgs = "WebUICommandLineActivatedEventArgs";

    static PyObject* _new_WebUICommandLineActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUICommandLineActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUICommandLineActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUICommandLineActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICommandLineActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICommandLineActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICommandLineActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICommandLineActivatedEventArgs_get_Operation(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUICommandLineActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUICommandLineActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUICommandLineActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUICommandLineActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUICommandLineActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUICommandLineActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUICommandLineActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUICommandLineActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUICommandLineActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "operation", reinterpret_cast<getter>(WebUICommandLineActivatedEventArgs_get_Operation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUICommandLineActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUICommandLineActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUICommandLineActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUICommandLineActivatedEventArgs },
        { Py_tp_methods, _methods_WebUICommandLineActivatedEventArgs },
        { Py_tp_getset, _getset_WebUICommandLineActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUICommandLineActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUICommandLineActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUICommandLineActivatedEventArgs
    };

    // ----- WebUIContactPanelActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIContactPanelActivatedEventArgs = "WebUIContactPanelActivatedEventArgs";

    static PyObject* _new_WebUIContactPanelActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIContactPanelActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIContactPanelActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIContactPanelActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIContactPanelActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIContactPanelActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIContactPanelActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIContactPanelActivatedEventArgs_get_Contact(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Contact());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIContactPanelActivatedEventArgs_get_ContactPanel(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContactPanel());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIContactPanelActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIContactPanelActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIContactPanelActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIContactPanelActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIContactPanelActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIContactPanelActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIContactPanelActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIContactPanelActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIContactPanelActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "contact", reinterpret_cast<getter>(WebUIContactPanelActivatedEventArgs_get_Contact), nullptr, nullptr, nullptr },
        { "contact_panel", reinterpret_cast<getter>(WebUIContactPanelActivatedEventArgs_get_ContactPanel), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIContactPanelActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIContactPanelActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIContactPanelActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIContactPanelActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIContactPanelActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIContactPanelActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIContactPanelActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIContactPanelActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIContactPanelActivatedEventArgs
    };

    // ----- WebUIDeviceActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIDeviceActivatedEventArgs = "WebUIDeviceActivatedEventArgs";

    static PyObject* _new_WebUIDeviceActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIDeviceActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIDeviceActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_CurrentlyShownApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentlyShownApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_DeviceInformationId(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceInformationId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_Verb(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDeviceActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIDeviceActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIDeviceActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIDeviceActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIDeviceActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "currently_shown_application_view_id", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_CurrentlyShownApplicationViewId), nullptr, nullptr, nullptr },
        { "device_information_id", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_DeviceInformationId), nullptr, nullptr, nullptr },
        { "verb", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_Verb), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIDeviceActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIDeviceActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIDeviceActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIDeviceActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIDeviceActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIDeviceActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIDeviceActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIDeviceActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIDeviceActivatedEventArgs
    };

    // ----- WebUIDevicePairingActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIDevicePairingActivatedEventArgs = "WebUIDevicePairingActivatedEventArgs";

    static PyObject* _new_WebUIDevicePairingActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIDevicePairingActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIDevicePairingActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIDevicePairingActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDevicePairingActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDevicePairingActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDevicePairingActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDevicePairingActivatedEventArgs_get_DeviceInformation(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeviceInformation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDevicePairingActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIDevicePairingActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIDevicePairingActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIDevicePairingActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIDevicePairingActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIDevicePairingActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIDevicePairingActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIDevicePairingActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIDevicePairingActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "device_information", reinterpret_cast<getter>(WebUIDevicePairingActivatedEventArgs_get_DeviceInformation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIDevicePairingActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIDevicePairingActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIDevicePairingActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIDevicePairingActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIDevicePairingActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIDevicePairingActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIDevicePairingActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIDevicePairingActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIDevicePairingActivatedEventArgs
    };

    // ----- WebUIDialReceiverActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIDialReceiverActivatedEventArgs = "WebUIDialReceiverActivatedEventArgs";

    static PyObject* _new_WebUIDialReceiverActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIDialReceiverActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIDialReceiverActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_CurrentlyShownApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentlyShownApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_AppName(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AppName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_Arguments(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_TileId(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TileId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIDialReceiverActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIDialReceiverActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIDialReceiverActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIDialReceiverActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIDialReceiverActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "currently_shown_application_view_id", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_CurrentlyShownApplicationViewId), nullptr, nullptr, nullptr },
        { "app_name", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_AppName), nullptr, nullptr, nullptr },
        { "arguments", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_Arguments), nullptr, nullptr, nullptr },
        { "tile_id", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_TileId), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIDialReceiverActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIDialReceiverActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIDialReceiverActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIDialReceiverActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIDialReceiverActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIDialReceiverActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIDialReceiverActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIDialReceiverActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIDialReceiverActivatedEventArgs
    };

    // ----- WebUIFileActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIFileActivatedEventArgs = "WebUIFileActivatedEventArgs";

    static PyObject* _new_WebUIFileActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIFileActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIFileActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIFileActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_CurrentlyShownApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentlyShownApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_Files(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Files());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_Verb(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Verb());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_NeighboringFilesQuery(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NeighboringFilesQuery());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIFileActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIFileActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIFileActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIFileActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIFileActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "currently_shown_application_view_id", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_CurrentlyShownApplicationViewId), nullptr, nullptr, nullptr },
        { "files", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_Files), nullptr, nullptr, nullptr },
        { "verb", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_Verb), nullptr, nullptr, nullptr },
        { "neighboring_files_query", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_NeighboringFilesQuery), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIFileActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIFileActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIFileActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIFileActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIFileActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIFileActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIFileActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIFileActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIFileActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIFileActivatedEventArgs
    };

    // ----- WebUIFileOpenPickerActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIFileOpenPickerActivatedEventArgs = "WebUIFileOpenPickerActivatedEventArgs";

    static PyObject* _new_WebUIFileOpenPickerActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIFileOpenPickerActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIFileOpenPickerActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIFileOpenPickerActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerActivatedEventArgs_get_FileOpenPickerUI(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FileOpenPickerUI());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerActivatedEventArgs_get_CallerPackageFamilyName(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CallerPackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIFileOpenPickerActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIFileOpenPickerActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIFileOpenPickerActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIFileOpenPickerActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIFileOpenPickerActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIFileOpenPickerActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIFileOpenPickerActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIFileOpenPickerActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "file_open_picker_u_i", reinterpret_cast<getter>(WebUIFileOpenPickerActivatedEventArgs_get_FileOpenPickerUI), nullptr, nullptr, nullptr },
        { "caller_package_family_name", reinterpret_cast<getter>(WebUIFileOpenPickerActivatedEventArgs_get_CallerPackageFamilyName), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIFileOpenPickerActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIFileOpenPickerActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIFileOpenPickerActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIFileOpenPickerActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIFileOpenPickerActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIFileOpenPickerActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIFileOpenPickerActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIFileOpenPickerActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIFileOpenPickerActivatedEventArgs
    };

    // ----- WebUIFileOpenPickerContinuationEventArgs class --------------------
    constexpr const char* const _type_name_WebUIFileOpenPickerContinuationEventArgs = "WebUIFileOpenPickerContinuationEventArgs";

    static PyObject* _new_WebUIFileOpenPickerContinuationEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIFileOpenPickerContinuationEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIFileOpenPickerContinuationEventArgs(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIFileOpenPickerContinuationEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerContinuationEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerContinuationEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerContinuationEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerContinuationEventArgs_get_ContinuationData(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerContinuationEventArgs_get_Files(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Files());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileOpenPickerContinuationEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIFileOpenPickerContinuationEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIFileOpenPickerContinuationEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIFileOpenPickerContinuationEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIFileOpenPickerContinuationEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIFileOpenPickerContinuationEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIFileOpenPickerContinuationEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIFileOpenPickerContinuationEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIFileOpenPickerContinuationEventArgs_get_User), nullptr, nullptr, nullptr },
        { "continuation_data", reinterpret_cast<getter>(WebUIFileOpenPickerContinuationEventArgs_get_ContinuationData), nullptr, nullptr, nullptr },
        { "files", reinterpret_cast<getter>(WebUIFileOpenPickerContinuationEventArgs_get_Files), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIFileOpenPickerContinuationEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIFileOpenPickerContinuationEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIFileOpenPickerContinuationEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIFileOpenPickerContinuationEventArgs },
        { Py_tp_methods, _methods_WebUIFileOpenPickerContinuationEventArgs },
        { Py_tp_getset, _getset_WebUIFileOpenPickerContinuationEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIFileOpenPickerContinuationEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIFileOpenPickerContinuationEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIFileOpenPickerContinuationEventArgs
    };

    // ----- WebUIFileSavePickerActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIFileSavePickerActivatedEventArgs = "WebUIFileSavePickerActivatedEventArgs";

    static PyObject* _new_WebUIFileSavePickerActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIFileSavePickerActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIFileSavePickerActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_FileSavePickerUI(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FileSavePickerUI());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_CallerPackageFamilyName(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CallerPackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_EnterpriseId(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EnterpriseId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIFileSavePickerActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIFileSavePickerActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIFileSavePickerActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIFileSavePickerActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "file_save_picker_u_i", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_FileSavePickerUI), nullptr, nullptr, nullptr },
        { "caller_package_family_name", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_CallerPackageFamilyName), nullptr, nullptr, nullptr },
        { "enterprise_id", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_EnterpriseId), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIFileSavePickerActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIFileSavePickerActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIFileSavePickerActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIFileSavePickerActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIFileSavePickerActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIFileSavePickerActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIFileSavePickerActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIFileSavePickerActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIFileSavePickerActivatedEventArgs
    };

    // ----- WebUIFileSavePickerContinuationEventArgs class --------------------
    constexpr const char* const _type_name_WebUIFileSavePickerContinuationEventArgs = "WebUIFileSavePickerContinuationEventArgs";

    static PyObject* _new_WebUIFileSavePickerContinuationEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIFileSavePickerContinuationEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIFileSavePickerContinuationEventArgs(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIFileSavePickerContinuationEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerContinuationEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerContinuationEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerContinuationEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerContinuationEventArgs_get_ContinuationData(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerContinuationEventArgs_get_File(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.File());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFileSavePickerContinuationEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIFileSavePickerContinuationEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIFileSavePickerContinuationEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIFileSavePickerContinuationEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIFileSavePickerContinuationEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIFileSavePickerContinuationEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIFileSavePickerContinuationEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIFileSavePickerContinuationEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIFileSavePickerContinuationEventArgs_get_User), nullptr, nullptr, nullptr },
        { "continuation_data", reinterpret_cast<getter>(WebUIFileSavePickerContinuationEventArgs_get_ContinuationData), nullptr, nullptr, nullptr },
        { "file", reinterpret_cast<getter>(WebUIFileSavePickerContinuationEventArgs_get_File), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIFileSavePickerContinuationEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIFileSavePickerContinuationEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIFileSavePickerContinuationEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIFileSavePickerContinuationEventArgs },
        { Py_tp_methods, _methods_WebUIFileSavePickerContinuationEventArgs },
        { Py_tp_getset, _getset_WebUIFileSavePickerContinuationEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIFileSavePickerContinuationEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIFileSavePickerContinuationEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIFileSavePickerContinuationEventArgs
    };

    // ----- WebUIFolderPickerContinuationEventArgs class --------------------
    constexpr const char* const _type_name_WebUIFolderPickerContinuationEventArgs = "WebUIFolderPickerContinuationEventArgs";

    static PyObject* _new_WebUIFolderPickerContinuationEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIFolderPickerContinuationEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIFolderPickerContinuationEventArgs(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIFolderPickerContinuationEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFolderPickerContinuationEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFolderPickerContinuationEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFolderPickerContinuationEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFolderPickerContinuationEventArgs_get_ContinuationData(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFolderPickerContinuationEventArgs_get_Folder(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Folder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIFolderPickerContinuationEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIFolderPickerContinuationEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIFolderPickerContinuationEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIFolderPickerContinuationEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIFolderPickerContinuationEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIFolderPickerContinuationEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIFolderPickerContinuationEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIFolderPickerContinuationEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIFolderPickerContinuationEventArgs_get_User), nullptr, nullptr, nullptr },
        { "continuation_data", reinterpret_cast<getter>(WebUIFolderPickerContinuationEventArgs_get_ContinuationData), nullptr, nullptr, nullptr },
        { "folder", reinterpret_cast<getter>(WebUIFolderPickerContinuationEventArgs_get_Folder), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIFolderPickerContinuationEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIFolderPickerContinuationEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIFolderPickerContinuationEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIFolderPickerContinuationEventArgs },
        { Py_tp_methods, _methods_WebUIFolderPickerContinuationEventArgs },
        { Py_tp_getset, _getset_WebUIFolderPickerContinuationEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIFolderPickerContinuationEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIFolderPickerContinuationEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIFolderPickerContinuationEventArgs
    };

    // ----- WebUILaunchActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUILaunchActivatedEventArgs = "WebUILaunchActivatedEventArgs";

    static PyObject* _new_WebUILaunchActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUILaunchActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUILaunchActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_CurrentlyShownApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentlyShownApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_Arguments(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Arguments());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_TileId(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TileId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_TileActivatedInfo(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TileActivatedInfo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_PrelaunchActivated(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PrelaunchActivated());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILaunchActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUILaunchActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUILaunchActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUILaunchActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUILaunchActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUILaunchActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "currently_shown_application_view_id", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_CurrentlyShownApplicationViewId), nullptr, nullptr, nullptr },
        { "arguments", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_Arguments), nullptr, nullptr, nullptr },
        { "tile_id", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_TileId), nullptr, nullptr, nullptr },
        { "tile_activated_info", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_TileActivatedInfo), nullptr, nullptr, nullptr },
        { "prelaunch_activated", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_PrelaunchActivated), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUILaunchActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUILaunchActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUILaunchActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUILaunchActivatedEventArgs },
        { Py_tp_methods, _methods_WebUILaunchActivatedEventArgs },
        { Py_tp_getset, _getset_WebUILaunchActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUILaunchActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUILaunchActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUILaunchActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUILaunchActivatedEventArgs
    };

    // ----- WebUILockScreenActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUILockScreenActivatedEventArgs = "WebUILockScreenActivatedEventArgs";

    static PyObject* _new_WebUILockScreenActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUILockScreenActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUILockScreenActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUILockScreenActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenActivatedEventArgs_get_CurrentlyShownApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentlyShownApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenActivatedEventArgs_get_Info(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Info());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUILockScreenActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUILockScreenActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUILockScreenActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUILockScreenActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUILockScreenActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUILockScreenActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUILockScreenActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUILockScreenActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "currently_shown_application_view_id", reinterpret_cast<getter>(WebUILockScreenActivatedEventArgs_get_CurrentlyShownApplicationViewId), nullptr, nullptr, nullptr },
        { "info", reinterpret_cast<getter>(WebUILockScreenActivatedEventArgs_get_Info), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUILockScreenActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUILockScreenActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUILockScreenActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUILockScreenActivatedEventArgs },
        { Py_tp_methods, _methods_WebUILockScreenActivatedEventArgs },
        { Py_tp_getset, _getset_WebUILockScreenActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUILockScreenActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUILockScreenActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUILockScreenActivatedEventArgs
    };

    // ----- WebUILockScreenComponentActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUILockScreenComponentActivatedEventArgs = "WebUILockScreenComponentActivatedEventArgs";

    static PyObject* _new_WebUILockScreenComponentActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUILockScreenComponentActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUILockScreenComponentActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUILockScreenComponentActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenComponentActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenComponentActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUILockScreenComponentActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUILockScreenComponentActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUILockScreenComponentActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUILockScreenComponentActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUILockScreenComponentActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUILockScreenComponentActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUILockScreenComponentActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUILockScreenComponentActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUILockScreenComponentActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUILockScreenComponentActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUILockScreenComponentActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUILockScreenComponentActivatedEventArgs },
        { Py_tp_methods, _methods_WebUILockScreenComponentActivatedEventArgs },
        { Py_tp_getset, _getset_WebUILockScreenComponentActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUILockScreenComponentActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUILockScreenComponentActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUILockScreenComponentActivatedEventArgs
    };

    // ----- WebUINavigatedDeferral class --------------------
    constexpr const char* const _type_name_WebUINavigatedDeferral = "WebUINavigatedDeferral";

    static PyObject* _new_WebUINavigatedDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUINavigatedDeferral);
        return nullptr;
    }

    static void _dealloc_WebUINavigatedDeferral(py::wrapper::Windows::UI::WebUI::WebUINavigatedDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUINavigatedDeferral_Complete(py::wrapper::Windows::UI::WebUI::WebUINavigatedDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_WebUINavigatedDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUINavigatedDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUINavigatedDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(WebUINavigatedDeferral_Complete), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUINavigatedDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUINavigatedDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_WebUINavigatedDeferral[] = 
    {
        { Py_tp_new, _new_WebUINavigatedDeferral },
        { Py_tp_dealloc, _dealloc_WebUINavigatedDeferral },
        { Py_tp_methods, _methods_WebUINavigatedDeferral },
        { Py_tp_getset, _getset_WebUINavigatedDeferral },
        { },
    };

    static PyType_Spec _type_spec_WebUINavigatedDeferral =
    {
        "_winsdk_Windows_UI_WebUI.WebUINavigatedDeferral",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUINavigatedDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUINavigatedDeferral
    };

    // ----- WebUINavigatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUINavigatedEventArgs = "WebUINavigatedEventArgs";

    static PyObject* _new_WebUINavigatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUINavigatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUINavigatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUINavigatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUINavigatedEventArgs_get_NavigatedOperation(py::wrapper::Windows::UI::WebUI::WebUINavigatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NavigatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUINavigatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUINavigatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUINavigatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUINavigatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUINavigatedEventArgs[] = {
        { "navigated_operation", reinterpret_cast<getter>(WebUINavigatedEventArgs_get_NavigatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUINavigatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUINavigatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUINavigatedEventArgs },
        { Py_tp_methods, _methods_WebUINavigatedEventArgs },
        { Py_tp_getset, _getset_WebUINavigatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUINavigatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUINavigatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUINavigatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUINavigatedEventArgs
    };

    // ----- WebUINavigatedOperation class --------------------
    constexpr const char* const _type_name_WebUINavigatedOperation = "WebUINavigatedOperation";

    static PyObject* _new_WebUINavigatedOperation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUINavigatedOperation);
        return nullptr;
    }

    static void _dealloc_WebUINavigatedOperation(py::wrapper::Windows::UI::WebUI::WebUINavigatedOperation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUINavigatedOperation_GetDeferral(py::wrapper::Windows::UI::WebUI::WebUINavigatedOperation* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_WebUINavigatedOperation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUINavigatedOperation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUINavigatedOperation[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(WebUINavigatedOperation_GetDeferral), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUINavigatedOperation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUINavigatedOperation[] = {
        { }
    };

    static PyType_Slot _type_slots_WebUINavigatedOperation[] = 
    {
        { Py_tp_new, _new_WebUINavigatedOperation },
        { Py_tp_dealloc, _dealloc_WebUINavigatedOperation },
        { Py_tp_methods, _methods_WebUINavigatedOperation },
        { Py_tp_getset, _getset_WebUINavigatedOperation },
        { },
    };

    static PyType_Spec _type_spec_WebUINavigatedOperation =
    {
        "_winsdk_Windows_UI_WebUI.WebUINavigatedOperation",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUINavigatedOperation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUINavigatedOperation
    };

    // ----- WebUIPhoneCallActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIPhoneCallActivatedEventArgs = "WebUIPhoneCallActivatedEventArgs";

    static PyObject* _new_WebUIPhoneCallActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIPhoneCallActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIPhoneCallActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIPhoneCallActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPhoneCallActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPhoneCallActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPhoneCallActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPhoneCallActivatedEventArgs_get_LineId(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LineId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPhoneCallActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIPhoneCallActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIPhoneCallActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIPhoneCallActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIPhoneCallActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIPhoneCallActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIPhoneCallActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIPhoneCallActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIPhoneCallActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "line_id", reinterpret_cast<getter>(WebUIPhoneCallActivatedEventArgs_get_LineId), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIPhoneCallActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIPhoneCallActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIPhoneCallActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIPhoneCallActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIPhoneCallActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIPhoneCallActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIPhoneCallActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIPhoneCallActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIPhoneCallActivatedEventArgs
    };

    // ----- WebUIPrintWorkflowForegroundTaskActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIPrintWorkflowForegroundTaskActivatedEventArgs = "WebUIPrintWorkflowForegroundTaskActivatedEventArgs";

    static PyObject* _new_WebUIPrintWorkflowForegroundTaskActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIPrintWorkflowForegroundTaskActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIPrintWorkflowForegroundTaskActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIPrintWorkflowForegroundTaskActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIPrintWorkflowForegroundTaskActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIPrintWorkflowForegroundTaskActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIPrintWorkflowForegroundTaskActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIPrintWorkflowForegroundTaskActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIPrintWorkflowForegroundTaskActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIPrintWorkflowForegroundTaskActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIPrintWorkflowForegroundTaskActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIPrintWorkflowForegroundTaskActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIPrintWorkflowForegroundTaskActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIPrintWorkflowForegroundTaskActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIPrintWorkflowForegroundTaskActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIPrintWorkflowForegroundTaskActivatedEventArgs
    };

    // ----- WebUIProtocolActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIProtocolActivatedEventArgs = "WebUIProtocolActivatedEventArgs";

    static PyObject* _new_WebUIProtocolActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIProtocolActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIProtocolActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_CurrentlyShownApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentlyShownApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_Uri(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_CallerPackageFamilyName(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CallerPackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_Data(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Data());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIProtocolActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIProtocolActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIProtocolActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIProtocolActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "currently_shown_application_view_id", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_CurrentlyShownApplicationViewId), nullptr, nullptr, nullptr },
        { "uri", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_Uri), nullptr, nullptr, nullptr },
        { "caller_package_family_name", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_CallerPackageFamilyName), nullptr, nullptr, nullptr },
        { "data", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_Data), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIProtocolActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIProtocolActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIProtocolActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIProtocolActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIProtocolActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIProtocolActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIProtocolActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIProtocolActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIProtocolActivatedEventArgs
    };

    // ----- WebUIProtocolForResultsActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIProtocolForResultsActivatedEventArgs = "WebUIProtocolForResultsActivatedEventArgs";

    static PyObject* _new_WebUIProtocolForResultsActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIProtocolForResultsActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIProtocolForResultsActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_CurrentlyShownApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CurrentlyShownApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_Uri(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Uri());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_CallerPackageFamilyName(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CallerPackageFamilyName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_Data(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Data());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_ProtocolForResultsOperation(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ProtocolForResultsOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIProtocolForResultsActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIProtocolForResultsActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIProtocolForResultsActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIProtocolForResultsActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIProtocolForResultsActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "currently_shown_application_view_id", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_CurrentlyShownApplicationViewId), nullptr, nullptr, nullptr },
        { "uri", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_Uri), nullptr, nullptr, nullptr },
        { "caller_package_family_name", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_CallerPackageFamilyName), nullptr, nullptr, nullptr },
        { "data", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_Data), nullptr, nullptr, nullptr },
        { "protocol_for_results_operation", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_ProtocolForResultsOperation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIProtocolForResultsActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIProtocolForResultsActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIProtocolForResultsActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIProtocolForResultsActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIProtocolForResultsActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIProtocolForResultsActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIProtocolForResultsActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIProtocolForResultsActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIProtocolForResultsActivatedEventArgs
    };

    // ----- WebUIRestrictedLaunchActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIRestrictedLaunchActivatedEventArgs = "WebUIRestrictedLaunchActivatedEventArgs";

    static PyObject* _new_WebUIRestrictedLaunchActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIRestrictedLaunchActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIRestrictedLaunchActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIRestrictedLaunchActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIRestrictedLaunchActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIRestrictedLaunchActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIRestrictedLaunchActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIRestrictedLaunchActivatedEventArgs_get_SharedContext(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SharedContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIRestrictedLaunchActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIRestrictedLaunchActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIRestrictedLaunchActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIRestrictedLaunchActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIRestrictedLaunchActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIRestrictedLaunchActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIRestrictedLaunchActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIRestrictedLaunchActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIRestrictedLaunchActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "shared_context", reinterpret_cast<getter>(WebUIRestrictedLaunchActivatedEventArgs_get_SharedContext), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIRestrictedLaunchActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIRestrictedLaunchActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIRestrictedLaunchActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIRestrictedLaunchActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIRestrictedLaunchActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIRestrictedLaunchActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIRestrictedLaunchActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIRestrictedLaunchActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIRestrictedLaunchActivatedEventArgs
    };

    // ----- WebUIShareTargetActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIShareTargetActivatedEventArgs = "WebUIShareTargetActivatedEventArgs";

    static PyObject* _new_WebUIShareTargetActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIShareTargetActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIShareTargetActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIShareTargetActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIShareTargetActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIShareTargetActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIShareTargetActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIShareTargetActivatedEventArgs_get_ShareOperation(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ShareOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIShareTargetActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIShareTargetActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIShareTargetActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIShareTargetActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIShareTargetActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIShareTargetActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIShareTargetActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIShareTargetActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIShareTargetActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "share_operation", reinterpret_cast<getter>(WebUIShareTargetActivatedEventArgs_get_ShareOperation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIShareTargetActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIShareTargetActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIShareTargetActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIShareTargetActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIShareTargetActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIShareTargetActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIShareTargetActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIShareTargetActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIShareTargetActivatedEventArgs
    };

    // ----- WebUIStartupTaskActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIStartupTaskActivatedEventArgs = "WebUIStartupTaskActivatedEventArgs";

    static PyObject* _new_WebUIStartupTaskActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIStartupTaskActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIStartupTaskActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIStartupTaskActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIStartupTaskActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIStartupTaskActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIStartupTaskActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIStartupTaskActivatedEventArgs_get_TaskId(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TaskId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIStartupTaskActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIStartupTaskActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIStartupTaskActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIStartupTaskActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIStartupTaskActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIStartupTaskActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIStartupTaskActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIStartupTaskActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIStartupTaskActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "task_id", reinterpret_cast<getter>(WebUIStartupTaskActivatedEventArgs_get_TaskId), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIStartupTaskActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIStartupTaskActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIStartupTaskActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIStartupTaskActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIStartupTaskActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIStartupTaskActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIStartupTaskActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIStartupTaskActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIStartupTaskActivatedEventArgs
    };

    // ----- WebUIToastNotificationActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIToastNotificationActivatedEventArgs = "WebUIToastNotificationActivatedEventArgs";

    static PyObject* _new_WebUIToastNotificationActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIToastNotificationActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIToastNotificationActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIToastNotificationActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIToastNotificationActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIToastNotificationActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIToastNotificationActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIToastNotificationActivatedEventArgs_get_Argument(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Argument());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIToastNotificationActivatedEventArgs_get_UserInput(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.UserInput());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIToastNotificationActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIToastNotificationActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIToastNotificationActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIToastNotificationActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIToastNotificationActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIToastNotificationActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIToastNotificationActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIToastNotificationActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIToastNotificationActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "argument", reinterpret_cast<getter>(WebUIToastNotificationActivatedEventArgs_get_Argument), nullptr, nullptr, nullptr },
        { "user_input", reinterpret_cast<getter>(WebUIToastNotificationActivatedEventArgs_get_UserInput), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIToastNotificationActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIToastNotificationActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIToastNotificationActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIToastNotificationActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIToastNotificationActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIToastNotificationActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIToastNotificationActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIToastNotificationActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIToastNotificationActivatedEventArgs
    };

    // ----- WebUIUserDataAccountProviderActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIUserDataAccountProviderActivatedEventArgs = "WebUIUserDataAccountProviderActivatedEventArgs";

    static PyObject* _new_WebUIUserDataAccountProviderActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIUserDataAccountProviderActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIUserDataAccountProviderActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIUserDataAccountProviderActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIUserDataAccountProviderActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIUserDataAccountProviderActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIUserDataAccountProviderActivatedEventArgs_get_Operation(py::wrapper::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIUserDataAccountProviderActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIUserDataAccountProviderActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIUserDataAccountProviderActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIUserDataAccountProviderActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIUserDataAccountProviderActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIUserDataAccountProviderActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIUserDataAccountProviderActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIUserDataAccountProviderActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "operation", reinterpret_cast<getter>(WebUIUserDataAccountProviderActivatedEventArgs_get_Operation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIUserDataAccountProviderActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIUserDataAccountProviderActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIUserDataAccountProviderActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIUserDataAccountProviderActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIUserDataAccountProviderActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIUserDataAccountProviderActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIUserDataAccountProviderActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIUserDataAccountProviderActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIUserDataAccountProviderActivatedEventArgs
    };

    // ----- WebUIView class --------------------
    constexpr const char* const _type_name_WebUIView = "WebUIView";

    static PyObject* _new_WebUIView(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIView);
        return nullptr;
    }

    static void _dealloc_WebUIView(py::wrapper::Windows::UI::WebUI::WebUIView* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIView_AddInitializeScript(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.AddInitializeScript(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_BuildLocalStreamUri(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.BuildLocalStreamUri(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_CapturePreviewToStreamAsync(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IRandomAccessStream>(args, 0);

                return py::convert(self->obj.CapturePreviewToStreamAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_CaptureSelectedContentToDataPackageAsync(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.CaptureSelectedContentToDataPackageAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_CreateAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::UI::WebUI::WebUIView::CreateAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                return py::convert(winrt::Windows::UI::WebUI::WebUIView::CreateAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_GetDeferredPermissionRequestById(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                winrt::Windows::Web::UI::WebViewControlDeferredPermissionRequest param1 { nullptr };

                self->obj.GetDeferredPermissionRequestById(param0, param1);

                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return out1.detach();
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_GoBack(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.GoBack();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_GoForward(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.GoForward();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_InvokeScriptAsync(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);

                return py::convert(self->obj.InvokeScriptAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_Navigate(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);

                self->obj.Navigate(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_NavigateToLocalStreamUri(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Web::IUriToStreamResolver>(args, 1);

                self->obj.NavigateToLocalStreamUri(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_NavigateToString(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.NavigateToString(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_NavigateWithHttpRequestMessage(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Web::Http::HttpRequestMessage>(args, 0);

                self->obj.NavigateWithHttpRequestMessage(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_Refresh(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Refresh();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_Stop(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Stop();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* WebUIView_get_IgnoreApplicationContentUriRulesNavigationRestrictions(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IgnoreApplicationContentUriRulesNavigationRestrictions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebUIView_put_IgnoreApplicationContentUriRulesNavigationRestrictions(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IgnoreApplicationContentUriRulesNavigationRestrictions(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebUIView_get_ApplicationViewId(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ApplicationViewId());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_get_Source(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Source());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebUIView_put_Source(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::Uri>(arg);

            self->obj.Source(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebUIView_get_DefaultBackgroundColor(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DefaultBackgroundColor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WebUIView_put_DefaultBackgroundColor(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::UI::Color>(arg);

            self->obj.DefaultBackgroundColor(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* WebUIView_get_CanGoBack(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanGoBack());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_get_CanGoForward(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CanGoForward());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_get_ContainsFullScreenElement(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContainsFullScreenElement());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_get_DeferredPermissionRequests(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DeferredPermissionRequests());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_get_DocumentTitle(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DocumentTitle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_get_Settings(py::wrapper::Windows::UI::WebUI::WebUIView* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Settings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_Activated(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WebUI::WebUIView, winrt::Windows::ApplicationModel::Activation::IActivatedEventArgs>>(arg);

            return py::convert(self->obj.Activated(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_Activated(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Activated(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_Closed(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::UI::WebUI::WebUIView, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.Closed(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_Closed(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Closed(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_ContainsFullScreenElementChanged(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.ContainsFullScreenElementChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_ContainsFullScreenElementChanged(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ContainsFullScreenElementChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_ContentLoading(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlContentLoadingEventArgs>>(arg);

            return py::convert(self->obj.ContentLoading(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_ContentLoading(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ContentLoading(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_DOMContentLoaded(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs>>(arg);

            return py::convert(self->obj.DOMContentLoaded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_DOMContentLoaded(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DOMContentLoaded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_FrameContentLoading(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlContentLoadingEventArgs>>(arg);

            return py::convert(self->obj.FrameContentLoading(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_FrameContentLoading(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameContentLoading(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_FrameDOMContentLoaded(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlDOMContentLoadedEventArgs>>(arg);

            return py::convert(self->obj.FrameDOMContentLoaded(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_FrameDOMContentLoaded(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameDOMContentLoaded(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_FrameNavigationCompleted(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs>>(arg);

            return py::convert(self->obj.FrameNavigationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_FrameNavigationCompleted(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameNavigationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_FrameNavigationStarting(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationStartingEventArgs>>(arg);

            return py::convert(self->obj.FrameNavigationStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_FrameNavigationStarting(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.FrameNavigationStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_LongRunningScriptDetected(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlLongRunningScriptDetectedEventArgs>>(arg);

            return py::convert(self->obj.LongRunningScriptDetected(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_LongRunningScriptDetected(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LongRunningScriptDetected(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_NavigationCompleted(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationCompletedEventArgs>>(arg);

            return py::convert(self->obj.NavigationCompleted(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_NavigationCompleted(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.NavigationCompleted(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_NavigationStarting(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNavigationStartingEventArgs>>(arg);

            return py::convert(self->obj.NavigationStarting(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_NavigationStarting(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.NavigationStarting(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_NewWindowRequested(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlNewWindowRequestedEventArgs>>(arg);

            return py::convert(self->obj.NewWindowRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_NewWindowRequested(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.NewWindowRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_PermissionRequested(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlPermissionRequestedEventArgs>>(arg);

            return py::convert(self->obj.PermissionRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_PermissionRequested(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.PermissionRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_ScriptNotify(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlScriptNotifyEventArgs>>(arg);

            return py::convert(self->obj.ScriptNotify(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_ScriptNotify(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.ScriptNotify(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_UnsafeContentWarningDisplaying(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.UnsafeContentWarningDisplaying(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_UnsafeContentWarningDisplaying(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnsafeContentWarningDisplaying(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_UnsupportedUriSchemeIdentified(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>>(arg);

            return py::convert(self->obj.UnsupportedUriSchemeIdentified(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_UnsupportedUriSchemeIdentified(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnsupportedUriSchemeIdentified(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_UnviewableContentIdentified(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlUnviewableContentIdentifiedEventArgs>>(arg);

            return py::convert(self->obj.UnviewableContentIdentified(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_UnviewableContentIdentified(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.UnviewableContentIdentified(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_add_WebResourceRequested(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::Web::UI::IWebViewControl, winrt::Windows::Web::UI::WebViewControlWebResourceRequestedEventArgs>>(arg);

            return py::convert(self->obj.WebResourceRequested(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIView_remove_WebResourceRequested(py::wrapper::Windows::UI::WebUI::WebUIView* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.WebResourceRequested(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIView(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIView>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIView[] = {
        { "add_initialize_script", reinterpret_cast<PyCFunction>(WebUIView_AddInitializeScript), METH_VARARGS, nullptr },
        { "build_local_stream_uri", reinterpret_cast<PyCFunction>(WebUIView_BuildLocalStreamUri), METH_VARARGS, nullptr },
        { "capture_preview_to_stream_async", reinterpret_cast<PyCFunction>(WebUIView_CapturePreviewToStreamAsync), METH_VARARGS, nullptr },
        { "capture_selected_content_to_data_package_async", reinterpret_cast<PyCFunction>(WebUIView_CaptureSelectedContentToDataPackageAsync), METH_VARARGS, nullptr },
        { "create_async", reinterpret_cast<PyCFunction>(WebUIView_CreateAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_deferred_permission_request_by_id", reinterpret_cast<PyCFunction>(WebUIView_GetDeferredPermissionRequestById), METH_VARARGS, nullptr },
        { "go_back", reinterpret_cast<PyCFunction>(WebUIView_GoBack), METH_VARARGS, nullptr },
        { "go_forward", reinterpret_cast<PyCFunction>(WebUIView_GoForward), METH_VARARGS, nullptr },
        { "invoke_script_async", reinterpret_cast<PyCFunction>(WebUIView_InvokeScriptAsync), METH_VARARGS, nullptr },
        { "navigate", reinterpret_cast<PyCFunction>(WebUIView_Navigate), METH_VARARGS, nullptr },
        { "navigate_to_local_stream_uri", reinterpret_cast<PyCFunction>(WebUIView_NavigateToLocalStreamUri), METH_VARARGS, nullptr },
        { "navigate_to_string", reinterpret_cast<PyCFunction>(WebUIView_NavigateToString), METH_VARARGS, nullptr },
        { "navigate_with_http_request_message", reinterpret_cast<PyCFunction>(WebUIView_NavigateWithHttpRequestMessage), METH_VARARGS, nullptr },
        { "refresh", reinterpret_cast<PyCFunction>(WebUIView_Refresh), METH_VARARGS, nullptr },
        { "stop", reinterpret_cast<PyCFunction>(WebUIView_Stop), METH_VARARGS, nullptr },
        { "add_activated", reinterpret_cast<PyCFunction>(WebUIView_add_Activated), METH_O, nullptr },
        { "remove_activated", reinterpret_cast<PyCFunction>(WebUIView_remove_Activated), METH_O, nullptr },
        { "add_closed", reinterpret_cast<PyCFunction>(WebUIView_add_Closed), METH_O, nullptr },
        { "remove_closed", reinterpret_cast<PyCFunction>(WebUIView_remove_Closed), METH_O, nullptr },
        { "add_contains_full_screen_element_changed", reinterpret_cast<PyCFunction>(WebUIView_add_ContainsFullScreenElementChanged), METH_O, nullptr },
        { "remove_contains_full_screen_element_changed", reinterpret_cast<PyCFunction>(WebUIView_remove_ContainsFullScreenElementChanged), METH_O, nullptr },
        { "add_content_loading", reinterpret_cast<PyCFunction>(WebUIView_add_ContentLoading), METH_O, nullptr },
        { "remove_content_loading", reinterpret_cast<PyCFunction>(WebUIView_remove_ContentLoading), METH_O, nullptr },
        { "add_d_o_m_content_loaded", reinterpret_cast<PyCFunction>(WebUIView_add_DOMContentLoaded), METH_O, nullptr },
        { "remove_d_o_m_content_loaded", reinterpret_cast<PyCFunction>(WebUIView_remove_DOMContentLoaded), METH_O, nullptr },
        { "add_frame_content_loading", reinterpret_cast<PyCFunction>(WebUIView_add_FrameContentLoading), METH_O, nullptr },
        { "remove_frame_content_loading", reinterpret_cast<PyCFunction>(WebUIView_remove_FrameContentLoading), METH_O, nullptr },
        { "add_frame_d_o_m_content_loaded", reinterpret_cast<PyCFunction>(WebUIView_add_FrameDOMContentLoaded), METH_O, nullptr },
        { "remove_frame_d_o_m_content_loaded", reinterpret_cast<PyCFunction>(WebUIView_remove_FrameDOMContentLoaded), METH_O, nullptr },
        { "add_frame_navigation_completed", reinterpret_cast<PyCFunction>(WebUIView_add_FrameNavigationCompleted), METH_O, nullptr },
        { "remove_frame_navigation_completed", reinterpret_cast<PyCFunction>(WebUIView_remove_FrameNavigationCompleted), METH_O, nullptr },
        { "add_frame_navigation_starting", reinterpret_cast<PyCFunction>(WebUIView_add_FrameNavigationStarting), METH_O, nullptr },
        { "remove_frame_navigation_starting", reinterpret_cast<PyCFunction>(WebUIView_remove_FrameNavigationStarting), METH_O, nullptr },
        { "add_long_running_script_detected", reinterpret_cast<PyCFunction>(WebUIView_add_LongRunningScriptDetected), METH_O, nullptr },
        { "remove_long_running_script_detected", reinterpret_cast<PyCFunction>(WebUIView_remove_LongRunningScriptDetected), METH_O, nullptr },
        { "add_navigation_completed", reinterpret_cast<PyCFunction>(WebUIView_add_NavigationCompleted), METH_O, nullptr },
        { "remove_navigation_completed", reinterpret_cast<PyCFunction>(WebUIView_remove_NavigationCompleted), METH_O, nullptr },
        { "add_navigation_starting", reinterpret_cast<PyCFunction>(WebUIView_add_NavigationStarting), METH_O, nullptr },
        { "remove_navigation_starting", reinterpret_cast<PyCFunction>(WebUIView_remove_NavigationStarting), METH_O, nullptr },
        { "add_new_window_requested", reinterpret_cast<PyCFunction>(WebUIView_add_NewWindowRequested), METH_O, nullptr },
        { "remove_new_window_requested", reinterpret_cast<PyCFunction>(WebUIView_remove_NewWindowRequested), METH_O, nullptr },
        { "add_permission_requested", reinterpret_cast<PyCFunction>(WebUIView_add_PermissionRequested), METH_O, nullptr },
        { "remove_permission_requested", reinterpret_cast<PyCFunction>(WebUIView_remove_PermissionRequested), METH_O, nullptr },
        { "add_script_notify", reinterpret_cast<PyCFunction>(WebUIView_add_ScriptNotify), METH_O, nullptr },
        { "remove_script_notify", reinterpret_cast<PyCFunction>(WebUIView_remove_ScriptNotify), METH_O, nullptr },
        { "add_unsafe_content_warning_displaying", reinterpret_cast<PyCFunction>(WebUIView_add_UnsafeContentWarningDisplaying), METH_O, nullptr },
        { "remove_unsafe_content_warning_displaying", reinterpret_cast<PyCFunction>(WebUIView_remove_UnsafeContentWarningDisplaying), METH_O, nullptr },
        { "add_unsupported_uri_scheme_identified", reinterpret_cast<PyCFunction>(WebUIView_add_UnsupportedUriSchemeIdentified), METH_O, nullptr },
        { "remove_unsupported_uri_scheme_identified", reinterpret_cast<PyCFunction>(WebUIView_remove_UnsupportedUriSchemeIdentified), METH_O, nullptr },
        { "add_unviewable_content_identified", reinterpret_cast<PyCFunction>(WebUIView_add_UnviewableContentIdentified), METH_O, nullptr },
        { "remove_unviewable_content_identified", reinterpret_cast<PyCFunction>(WebUIView_remove_UnviewableContentIdentified), METH_O, nullptr },
        { "add_web_resource_requested", reinterpret_cast<PyCFunction>(WebUIView_add_WebResourceRequested), METH_O, nullptr },
        { "remove_web_resource_requested", reinterpret_cast<PyCFunction>(WebUIView_remove_WebResourceRequested), METH_O, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIView), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIView[] = {
        { "ignore_application_content_uri_rules_navigation_restrictions", reinterpret_cast<getter>(WebUIView_get_IgnoreApplicationContentUriRulesNavigationRestrictions), reinterpret_cast<setter>(WebUIView_put_IgnoreApplicationContentUriRulesNavigationRestrictions), nullptr, nullptr },
        { "application_view_id", reinterpret_cast<getter>(WebUIView_get_ApplicationViewId), nullptr, nullptr, nullptr },
        { "source", reinterpret_cast<getter>(WebUIView_get_Source), reinterpret_cast<setter>(WebUIView_put_Source), nullptr, nullptr },
        { "default_background_color", reinterpret_cast<getter>(WebUIView_get_DefaultBackgroundColor), reinterpret_cast<setter>(WebUIView_put_DefaultBackgroundColor), nullptr, nullptr },
        { "can_go_back", reinterpret_cast<getter>(WebUIView_get_CanGoBack), nullptr, nullptr, nullptr },
        { "can_go_forward", reinterpret_cast<getter>(WebUIView_get_CanGoForward), nullptr, nullptr, nullptr },
        { "contains_full_screen_element", reinterpret_cast<getter>(WebUIView_get_ContainsFullScreenElement), nullptr, nullptr, nullptr },
        { "deferred_permission_requests", reinterpret_cast<getter>(WebUIView_get_DeferredPermissionRequests), nullptr, nullptr, nullptr },
        { "document_title", reinterpret_cast<getter>(WebUIView_get_DocumentTitle), nullptr, nullptr, nullptr },
        { "settings", reinterpret_cast<getter>(WebUIView_get_Settings), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIView[] = 
    {
        { Py_tp_new, _new_WebUIView },
        { Py_tp_dealloc, _dealloc_WebUIView },
        { Py_tp_methods, _methods_WebUIView },
        { Py_tp_getset, _getset_WebUIView },
        { },
    };

    static PyType_Spec _type_spec_WebUIView =
    {
        "_winsdk_Windows_UI_WebUI.WebUIView",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIView),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIView
    };

    // ----- WebUIVoiceCommandActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIVoiceCommandActivatedEventArgs = "WebUIVoiceCommandActivatedEventArgs";

    static PyObject* _new_WebUIVoiceCommandActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIVoiceCommandActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIVoiceCommandActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIVoiceCommandActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIVoiceCommandActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIVoiceCommandActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIVoiceCommandActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIVoiceCommandActivatedEventArgs_get_Result(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Result());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIVoiceCommandActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIVoiceCommandActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIVoiceCommandActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIVoiceCommandActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIVoiceCommandActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIVoiceCommandActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIVoiceCommandActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIVoiceCommandActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIVoiceCommandActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "result", reinterpret_cast<getter>(WebUIVoiceCommandActivatedEventArgs_get_Result), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIVoiceCommandActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIVoiceCommandActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIVoiceCommandActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIVoiceCommandActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIVoiceCommandActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIVoiceCommandActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIVoiceCommandActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIVoiceCommandActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIVoiceCommandActivatedEventArgs
    };

    // ----- WebUIWebAccountProviderActivatedEventArgs class --------------------
    constexpr const char* const _type_name_WebUIWebAccountProviderActivatedEventArgs = "WebUIWebAccountProviderActivatedEventArgs";

    static PyObject* _new_WebUIWebAccountProviderActivatedEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIWebAccountProviderActivatedEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIWebAccountProviderActivatedEventArgs(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIWebAccountProviderActivatedEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAccountProviderActivatedEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAccountProviderActivatedEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAccountProviderActivatedEventArgs_get_User(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.User());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAccountProviderActivatedEventArgs_get_Operation(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Operation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAccountProviderActivatedEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIWebAccountProviderActivatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIWebAccountProviderActivatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIWebAccountProviderActivatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIWebAccountProviderActivatedEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIWebAccountProviderActivatedEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIWebAccountProviderActivatedEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIWebAccountProviderActivatedEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "user", reinterpret_cast<getter>(WebUIWebAccountProviderActivatedEventArgs_get_User), nullptr, nullptr, nullptr },
        { "operation", reinterpret_cast<getter>(WebUIWebAccountProviderActivatedEventArgs_get_Operation), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIWebAccountProviderActivatedEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIWebAccountProviderActivatedEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIWebAccountProviderActivatedEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIWebAccountProviderActivatedEventArgs },
        { Py_tp_methods, _methods_WebUIWebAccountProviderActivatedEventArgs },
        { Py_tp_getset, _getset_WebUIWebAccountProviderActivatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIWebAccountProviderActivatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIWebAccountProviderActivatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIWebAccountProviderActivatedEventArgs
    };

    // ----- WebUIWebAuthenticationBrokerContinuationEventArgs class --------------------
    constexpr const char* const _type_name_WebUIWebAuthenticationBrokerContinuationEventArgs = "WebUIWebAuthenticationBrokerContinuationEventArgs";

    static PyObject* _new_WebUIWebAuthenticationBrokerContinuationEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_WebUIWebAuthenticationBrokerContinuationEventArgs);
        return nullptr;
    }

    static void _dealloc_WebUIWebAuthenticationBrokerContinuationEventArgs(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* WebUIWebAuthenticationBrokerContinuationEventArgs_get_Kind(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAuthenticationBrokerContinuationEventArgs_get_PreviousExecutionState(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousExecutionState());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAuthenticationBrokerContinuationEventArgs_get_SplashScreen(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SplashScreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAuthenticationBrokerContinuationEventArgs_get_ContinuationData(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ContinuationData());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAuthenticationBrokerContinuationEventArgs_get_WebAuthenticationResult(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.WebAuthenticationResult());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* WebUIWebAuthenticationBrokerContinuationEventArgs_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_WebUIWebAuthenticationBrokerContinuationEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_WebUIWebAuthenticationBrokerContinuationEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_WebUIWebAuthenticationBrokerContinuationEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_WebUIWebAuthenticationBrokerContinuationEventArgs[] = {
        { "kind", reinterpret_cast<getter>(WebUIWebAuthenticationBrokerContinuationEventArgs_get_Kind), nullptr, nullptr, nullptr },
        { "previous_execution_state", reinterpret_cast<getter>(WebUIWebAuthenticationBrokerContinuationEventArgs_get_PreviousExecutionState), nullptr, nullptr, nullptr },
        { "splash_screen", reinterpret_cast<getter>(WebUIWebAuthenticationBrokerContinuationEventArgs_get_SplashScreen), nullptr, nullptr, nullptr },
        { "continuation_data", reinterpret_cast<getter>(WebUIWebAuthenticationBrokerContinuationEventArgs_get_ContinuationData), nullptr, nullptr, nullptr },
        { "web_authentication_result", reinterpret_cast<getter>(WebUIWebAuthenticationBrokerContinuationEventArgs_get_WebAuthenticationResult), nullptr, nullptr, nullptr },
        { "activated_operation", reinterpret_cast<getter>(WebUIWebAuthenticationBrokerContinuationEventArgs_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WebUIWebAuthenticationBrokerContinuationEventArgs[] = 
    {
        { Py_tp_new, _new_WebUIWebAuthenticationBrokerContinuationEventArgs },
        { Py_tp_dealloc, _dealloc_WebUIWebAuthenticationBrokerContinuationEventArgs },
        { Py_tp_methods, _methods_WebUIWebAuthenticationBrokerContinuationEventArgs },
        { Py_tp_getset, _getset_WebUIWebAuthenticationBrokerContinuationEventArgs },
        { },
    };

    static PyType_Spec _type_spec_WebUIWebAuthenticationBrokerContinuationEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.WebUIWebAuthenticationBrokerContinuationEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WebUIWebAuthenticationBrokerContinuationEventArgs
    };

    // ----- IActivatedEventArgsDeferral interface --------------------
    constexpr const char* const _type_name_IActivatedEventArgsDeferral = "IActivatedEventArgsDeferral";

    static PyObject* _new_IActivatedEventArgsDeferral(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IActivatedEventArgsDeferral);
        return nullptr;
    }

    static void _dealloc_IActivatedEventArgsDeferral(py::wrapper::Windows::UI::WebUI::IActivatedEventArgsDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IActivatedEventArgsDeferral_get_ActivatedOperation(py::wrapper::Windows::UI::WebUI::IActivatedEventArgsDeferral* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ActivatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IActivatedEventArgsDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::IActivatedEventArgsDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IActivatedEventArgsDeferral[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_IActivatedEventArgsDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IActivatedEventArgsDeferral[] = {
        { "activated_operation", reinterpret_cast<getter>(IActivatedEventArgsDeferral_get_ActivatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IActivatedEventArgsDeferral[] = 
    {
        { Py_tp_new, _new_IActivatedEventArgsDeferral },
        { Py_tp_dealloc, _dealloc_IActivatedEventArgsDeferral },
        { Py_tp_methods, _methods_IActivatedEventArgsDeferral },
        { Py_tp_getset, _getset_IActivatedEventArgsDeferral },
        { },
    };

    static PyType_Spec _type_spec_IActivatedEventArgsDeferral =
    {
        "_winsdk_Windows_UI_WebUI.IActivatedEventArgsDeferral",
        sizeof(py::wrapper::Windows::UI::WebUI::IActivatedEventArgsDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IActivatedEventArgsDeferral
    };

    // ----- IWebUIBackgroundTaskInstance interface --------------------
    constexpr const char* const _type_name_IWebUIBackgroundTaskInstance = "IWebUIBackgroundTaskInstance";

    static PyObject* _new_IWebUIBackgroundTaskInstance(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebUIBackgroundTaskInstance);
        return nullptr;
    }

    static void _dealloc_IWebUIBackgroundTaskInstance(py::wrapper::Windows::UI::WebUI::IWebUIBackgroundTaskInstance* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebUIBackgroundTaskInstance_get_Succeeded(py::wrapper::Windows::UI::WebUI::IWebUIBackgroundTaskInstance* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Succeeded());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IWebUIBackgroundTaskInstance_put_Succeeded(py::wrapper::Windows::UI::WebUI::IWebUIBackgroundTaskInstance* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.Succeeded(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_IWebUIBackgroundTaskInstance(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::IWebUIBackgroundTaskInstance>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebUIBackgroundTaskInstance[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebUIBackgroundTaskInstance), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebUIBackgroundTaskInstance[] = {
        { "succeeded", reinterpret_cast<getter>(IWebUIBackgroundTaskInstance_get_Succeeded), reinterpret_cast<setter>(IWebUIBackgroundTaskInstance_put_Succeeded), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IWebUIBackgroundTaskInstance[] = 
    {
        { Py_tp_new, _new_IWebUIBackgroundTaskInstance },
        { Py_tp_dealloc, _dealloc_IWebUIBackgroundTaskInstance },
        { Py_tp_methods, _methods_IWebUIBackgroundTaskInstance },
        { Py_tp_getset, _getset_IWebUIBackgroundTaskInstance },
        { },
    };

    static PyType_Spec _type_spec_IWebUIBackgroundTaskInstance =
    {
        "_winsdk_Windows_UI_WebUI.IWebUIBackgroundTaskInstance",
        sizeof(py::wrapper::Windows::UI::WebUI::IWebUIBackgroundTaskInstance),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebUIBackgroundTaskInstance
    };

    // ----- IWebUINavigatedEventArgs interface --------------------
    constexpr const char* const _type_name_IWebUINavigatedEventArgs = "IWebUINavigatedEventArgs";

    static PyObject* _new_IWebUINavigatedEventArgs(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IWebUINavigatedEventArgs);
        return nullptr;
    }

    static void _dealloc_IWebUINavigatedEventArgs(py::wrapper::Windows::UI::WebUI::IWebUINavigatedEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IWebUINavigatedEventArgs_get_NavigatedOperation(py::wrapper::Windows::UI::WebUI::IWebUINavigatedEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NavigatedOperation());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IWebUINavigatedEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::WebUI::IWebUINavigatedEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IWebUINavigatedEventArgs[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_IWebUINavigatedEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IWebUINavigatedEventArgs[] = {
        { "navigated_operation", reinterpret_cast<getter>(IWebUINavigatedEventArgs_get_NavigatedOperation), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IWebUINavigatedEventArgs[] = 
    {
        { Py_tp_new, _new_IWebUINavigatedEventArgs },
        { Py_tp_dealloc, _dealloc_IWebUINavigatedEventArgs },
        { Py_tp_methods, _methods_IWebUINavigatedEventArgs },
        { Py_tp_getset, _getset_IWebUINavigatedEventArgs },
        { },
    };

    static PyType_Spec _type_spec_IWebUINavigatedEventArgs =
    {
        "_winsdk_Windows_UI_WebUI.IWebUINavigatedEventArgs",
        sizeof(py::wrapper::Windows::UI::WebUI::IWebUINavigatedEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IWebUINavigatedEventArgs
    };

    // ----- Windows.UI.WebUI Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::Object>::python_type) };

            py::winrt_type<winrt::Windows::UI::WebUI::ActivatedDeferral>::python_type = py::register_python_type(module, _type_name_ActivatedDeferral, &_type_spec_ActivatedDeferral, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::ActivatedOperation>::python_type = py::register_python_type(module, _type_name_ActivatedOperation, &_type_spec_ActivatedOperation, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::BackgroundActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_BackgroundActivatedEventArgs, &_type_spec_BackgroundActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::EnteredBackgroundEventArgs>::python_type = py::register_python_type(module, _type_name_EnteredBackgroundEventArgs, &_type_spec_EnteredBackgroundEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::HtmlPrintDocumentSource>::python_type = py::register_python_type(module, _type_name_HtmlPrintDocumentSource, &_type_spec_HtmlPrintDocumentSource, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::LeavingBackgroundEventArgs>::python_type = py::register_python_type(module, _type_name_LeavingBackgroundEventArgs, &_type_spec_LeavingBackgroundEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::NewWebUIViewCreatedEventArgs>::python_type = py::register_python_type(module, _type_name_NewWebUIViewCreatedEventArgs, &_type_spec_NewWebUIViewCreatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::SuspendingDeferral>::python_type = py::register_python_type(module, _type_name_SuspendingDeferral, &_type_spec_SuspendingDeferral, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::SuspendingEventArgs>::python_type = py::register_python_type(module, _type_name_SuspendingEventArgs, &_type_spec_SuspendingEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::SuspendingOperation>::python_type = py::register_python_type(module, _type_name_SuspendingOperation, &_type_spec_SuspendingOperation, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIApplication>::python_type = py::register_python_type(module, _type_name_WebUIApplication, &_type_spec_WebUIApplication, nullptr);
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs, &_type_spec_WebUIAppointmentsProviderAddAppointmentActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs, &_type_spec_WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs, &_type_spec_WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, &_type_spec_WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs, &_type_spec_WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIBackgroundTaskInstance>::python_type = py::register_python_type(module, _type_name_WebUIBackgroundTaskInstance, &_type_spec_WebUIBackgroundTaskInstance, nullptr);
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass>::python_type = py::register_python_type(module, _type_name_WebUIBackgroundTaskInstanceRuntimeClass, &_type_spec_WebUIBackgroundTaskInstanceRuntimeClass, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIBarcodeScannerPreviewActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIBarcodeScannerPreviewActivatedEventArgs, &_type_spec_WebUIBarcodeScannerPreviewActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUICachedFileUpdaterActivatedEventArgs, &_type_spec_WebUICachedFileUpdaterActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUICommandLineActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUICommandLineActivatedEventArgs, &_type_spec_WebUICommandLineActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIContactPanelActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIContactPanelActivatedEventArgs, &_type_spec_WebUIContactPanelActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIDeviceActivatedEventArgs, &_type_spec_WebUIDeviceActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIDevicePairingActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIDevicePairingActivatedEventArgs, &_type_spec_WebUIDevicePairingActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIDialReceiverActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIDialReceiverActivatedEventArgs, &_type_spec_WebUIDialReceiverActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIFileActivatedEventArgs, &_type_spec_WebUIFileActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIFileOpenPickerActivatedEventArgs, &_type_spec_WebUIFileOpenPickerActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileOpenPickerContinuationEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIFileOpenPickerContinuationEventArgs, &_type_spec_WebUIFileOpenPickerContinuationEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIFileSavePickerActivatedEventArgs, &_type_spec_WebUIFileSavePickerActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIFileSavePickerContinuationEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIFileSavePickerContinuationEventArgs, &_type_spec_WebUIFileSavePickerContinuationEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIFolderPickerContinuationEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIFolderPickerContinuationEventArgs, &_type_spec_WebUIFolderPickerContinuationEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUILaunchActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUILaunchActivatedEventArgs, &_type_spec_WebUILaunchActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUILockScreenActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUILockScreenActivatedEventArgs, &_type_spec_WebUILockScreenActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUILockScreenComponentActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUILockScreenComponentActivatedEventArgs, &_type_spec_WebUILockScreenComponentActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUINavigatedDeferral>::python_type = py::register_python_type(module, _type_name_WebUINavigatedDeferral, &_type_spec_WebUINavigatedDeferral, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUINavigatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUINavigatedEventArgs, &_type_spec_WebUINavigatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUINavigatedOperation>::python_type = py::register_python_type(module, _type_name_WebUINavigatedOperation, &_type_spec_WebUINavigatedOperation, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIPhoneCallActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIPhoneCallActivatedEventArgs, &_type_spec_WebUIPhoneCallActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIPrintWorkflowForegroundTaskActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIPrintWorkflowForegroundTaskActivatedEventArgs, &_type_spec_WebUIPrintWorkflowForegroundTaskActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIProtocolActivatedEventArgs, &_type_spec_WebUIProtocolActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIProtocolForResultsActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIProtocolForResultsActivatedEventArgs, &_type_spec_WebUIProtocolForResultsActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIRestrictedLaunchActivatedEventArgs, &_type_spec_WebUIRestrictedLaunchActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIShareTargetActivatedEventArgs, &_type_spec_WebUIShareTargetActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIStartupTaskActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIStartupTaskActivatedEventArgs, &_type_spec_WebUIStartupTaskActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIToastNotificationActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIToastNotificationActivatedEventArgs, &_type_spec_WebUIToastNotificationActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIUserDataAccountProviderActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIUserDataAccountProviderActivatedEventArgs, &_type_spec_WebUIUserDataAccountProviderActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIView>::python_type = py::register_python_type(module, _type_name_WebUIView, &_type_spec_WebUIView, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIVoiceCommandActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIVoiceCommandActivatedEventArgs, &_type_spec_WebUIVoiceCommandActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIWebAccountProviderActivatedEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIWebAccountProviderActivatedEventArgs, &_type_spec_WebUIWebAccountProviderActivatedEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::WebUIWebAuthenticationBrokerContinuationEventArgs>::python_type = py::register_python_type(module, _type_name_WebUIWebAuthenticationBrokerContinuationEventArgs, &_type_spec_WebUIWebAuthenticationBrokerContinuationEventArgs, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::IActivatedEventArgsDeferral>::python_type = py::register_python_type(module, _type_name_IActivatedEventArgsDeferral, &_type_spec_IActivatedEventArgsDeferral, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::IWebUIBackgroundTaskInstance>::python_type = py::register_python_type(module, _type_name_IWebUIBackgroundTaskInstance, &_type_spec_IWebUIBackgroundTaskInstance, bases.get());
            py::winrt_type<winrt::Windows::UI::WebUI::IWebUINavigatedEventArgs>::python_type = py::register_python_type(module, _type_name_IWebUINavigatedEventArgs, &_type_spec_IWebUINavigatedEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {{Py_mod_exec, module_exec}, {}};

    PyDoc_STRVAR(module_doc, "Windows.UI.WebUI");

    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_UI_WebUI",
           module_doc,
           0,
           nullptr,
           module_slots,
           nullptr,
           nullptr,
           nullptr};
} // py::cpp::Windows::UI::WebUI

PyMODINIT_FUNC
PyInit__winsdk_Windows_UI_WebUI (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::UI::WebUI::module_def);
}
